---

# Copyright 2023 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Disable SELinux
  ansible.posix.selinux:
    state: disabled
  notify: restart host

- name: Set up DNS and networking
  when: enable_dns
  block:
    - name: Update RHEL networking
      when: ansible_facts['os_family'] == 'RedHat'
      block:
        - name: Set cloud-init to preserve hostname (RHEL)
          ansible.builtin.lineinfile:
            path: /etc/cloud/cloud.cfg
            regex: "^(#)?preserve_hostname"
            line: "preserve_hostname: 1"
            state: present
          notify: restart host

        - name: Set interface config to preserve resolv.conf changes (RHEL)'
          ansible.builtin.lineinfile:
            path: "/etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}"
            regex: "^(#)?PEERDNS"
            line: "PEERDNS=no"
            state: present
          notify: restart host

        - name: Set /etc/NetworkManager/conf.d/disable-resolve.conf-managing.conf (RHEL)
          ansible.builtin.copy:
            dest: /etc/NetworkManager/conf.d/disable-resolve.conf-managing.conf
            content: |
              # Generated by Ansible
              [main]
              dns=none
          notify: restart host

        - name: Set /etc/resolv.conf directly
          ansible.builtin.copy:
            dest: /etc/resolv.conf
            content: |
              # Generated by Ansible
              search {{ ipaserver_domain }}
              {{ ['nameserver '] | product(ipa_server_ips | sort) | map('join') | join('\n') }}
          notify: restart host

        - name: Disable nm-cloud-setup if present
          ignore_errors: yes
          ansible.builtin.command: "{{ __nm_cloud_setup_disable_item }}"
          loop_control:
            loop_var: __nm_cloud_setup_disable_item
          loop:
            - systemctl disable nm-cloud-setup.service nm-cloud-setup.timer
            - systemctl stop nm-cloud-setup.service nm-cloud-setup.timer
            - ip rule del prio 30400
            - rm -rf /etc/systemd/system/nm-cloud-setup.service.d

        - name: Ensure NetworkManager is running to maintain DHCP
          ansible.builtin.service:
            name: NetworkManager
            state: restarted

    - name: Set /etc/hostname to the FQDN
      ansible.builtin.copy:
        content: "{{ inventory_hostname }}"
        dest: /etc/hostname
      notify: restart host

    - name: Set /etc/hosts
      ansible.builtin.copy:
        dest: /etc/hosts
        content: |
          # Set by Ansible
          {{ ansible_default_ipv4.address }} {{ inventory_hostname }} {{ inventory_hostname_short }}
      notify: restart host

    - name: Set /etc/dhcp/dhclient.conf for domain search and name servers
      ansible.builtin.lineinfile:
        path: /etc/dhcp/dhclient.conf
        regex: "^(#)?{{ dhclient_entry.value }}"
        line: "{{ dhclient_entry.value }}"
        state: present
      loop: "{{ entries | dict2items }}"
      loop_control:
        loop_var: dhclient_entry
        label: "{{ dhclient_entry.key }}"
      vars:
        entries:
          domain_search: supersede domain-search "{{ ipaserver_domain }}";
          domain_name_servers: supersede domain-name-servers {{ ipa_server_ips | sort | union(fallback_nameservers) | join(', ') }};
      notify: restart host

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Set up the FreeIPA Client
  ansible.builtin.include_role:
    name: freeipa.ansible_freeipa.ipaclient
  vars:
    state: present
    ipaclient_hostname: "{{ inventory_hostname }}"
    ipaclient_servers: "{{ ipa_hosts }}"
    ipaserver_setup_dns: "{{ enable_dns }}"
    ipasssd_enable_dns_updates: "{{ enable_dns }}"
    ipaclient_mkhomedir: yes
