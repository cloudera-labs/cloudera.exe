---

# Copyright 2023 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Check if Download Mirror cache file exists
  register: __auto_repo_mirror_file_stat
  ansible.builtin.stat:
    path: "{{ init__auto_repo_mirror_artefact }}"

- name: Prepare for Download Mirror parsing
  when:
    - __auto_repo_mirror_file_stat.stat.exists
    - use_auto_repo_mirror | default(default_enable_auto_repo_mirror) | bool
  block:
    - name: Check a custom_repo is part of the cluster definition if using Download Mirror
      when: use_auto_repo_mirror | default(default_enable_auto_repo_mirror) | bool
      ansible.builtin.assert:
        that: "'custom_repo' in groups"
        fail_msg: "You must have a custom_repo in your Cluster Inventory when using Download Mirror"

    - name: Handle AWS cache key generation
      when: globals.infra_type == 'aws'
      block:
        - name: Get AWS Account Info
          amazon.aws.aws_caller_info:
          register: __aws_caller_info

        - name: Set parcel cache ini lookup key
          ansible.builtin.set_fact:
            init__auto_repo_mirror_ini_key: "{{ __aws_caller_info.account }}"

# Ini lookup fails when section is not present, but lacks good control characteristics that I can find
- name: Determine if there is a relevant cache entry
  when:
    - init__auto_repo_mirror_ini_key is defined
    - use_auto_repo_mirror | default(default_enable_auto_repo_mirror) | bool
  ignore_errors: yes
  ansible.builtin.set_fact:
    __auto_repo_mirror_ini_entry: "{{ lookup('ini', __ini_lookup) }}"
  vars:
    __ini_lookup: ".+{{ init__auto_repo_mirror_ini_key }}.+ section={{ globals.infra_type }}:{{ globals.region }} file={{ init__auto_repo_mirror_artefact }} re=yes"

- name: Handle Download Mirror injection if cache entry found
  when:
    - __auto_repo_mirror_ini_entry is defined
  block:
    - name: Generate a unique name
      set_fact:
        __tmp_cluster_file: "{{ ['/tmp', 99999999 | random | to_uuid] | path_join }}"

    - name: Copy Cluster definition to temp file
      copy:
        src: "{{ init__cluster_definition_file }}"
        dest: "{{ __tmp_cluster_file }}"

    - name: Inject Parcel cache entries to Repository URLs
      ansible.builtin.replace:
        name: "{{ __tmp_cluster_file }}"
        regexp: '^(\s+\-\s)https://archive\.cloudera\.com(\/.+)$'
        replace: '\1http://{{ groups.custom_repo | first }}\2'

    - name: Set Cluster Definition file to Temp file with parcel cache entries
      ansible.builtin.set_fact:
        init__cluster_definition_file: "{{ __tmp_cluster_file }}"

    - name: Fetch repositories from cluster definition
      ansible.builtin.set_fact:
        init__preparse_repo_listing: "{{ lookup('file', init__cluster_definition_file ) | from_yaml | json_query('clusters[*].repositories') | flatten }}"

    - name: Prepare lookup list of Repository entries
      loop: "{{ init__preparse_repo_listing }}"
      loop_control:
        loop_var: __cluster_repo_item
      ansible.builtin.set_fact:
        init__cluster_repo_entries: "{{ init__cluster_repo_entries | default([]) + [__cluster_repo_item | urlsplit('path') ] }}"

    - name: Create list of Download Mirror URLs filtered to required repositories and distros
      loop: "{{ init__cluster_repo_entries }}"
      loop_control:
        loop_var: __cluster_repo_path_item
      ansible.builtin.set_fact:
        init__urls_to_sign: "{{ init__urls_to_sign
          | default([]) + __auto_repo_mirror_ini_entry
          | select('search', __cluster_repo_path_item)
          | select('search', init__parcel_distro)
          | list }}"

    - name: Include Cloudera Manager Tarball
      ansible.builtin.set_fact:
        init__urls_to_sign: "{{ init__urls_to_sign
            | default([]) + __auto_repo_mirror_ini_entry
            | select('search', 'repo-as-tarball')
            | select('search', cloudera_manager_version)
            | select('search', cm_distro_select[init__parcel_distro]['version'] | string + '.tar')
            | list }}"

# TODO: Filter to relevent version manifests, not all manifests, just to be tidy
    - name: Ensure manifest is included in Download Mirror URLs if present
      loop: "{{ init__cluster_repo_entries }}"
      loop_control:
        loop_var: __cluster_repo_path_item
      ansible.builtin.set_fact:
        init__urls_to_sign: "{{ init__urls_to_sign
            | default([]) + __auto_repo_mirror_ini_entry
            | select('search', 'manifest.json')
            | list }}"

- name: Get AWS Specific download URIs
  when:
    - globals.infra_type == 'aws'
    - init__urls_to_sign is defined
  block:
    - name: Generate signed URIs for hosted parcels to be pulled into custom_repo
      register: __s3_signed_uris
      loop: "{{ init__urls_to_sign }}"
      loop_control:
        loop_var: __s3_bucket_uri
      amazon.aws.aws_s3:
        bucket: "{{ __s3_bucket_uri | regex_replace('^.+//(.+)\\.s3.+$', '\\1') }}"
        object: "{{ __s3_bucket_uri | regex_replace('^.+amazonaws\\.com(.+)$', '\\1') }}"
        ignore_nonexistent_bucket: yes
        expiry: "{{ download_link_expiry | default(default_download_link_expiry) }}"
        mode: geturl

    - name: Set List of files to download to custom_repo
      ansible.builtin.set_fact:
        auto_repo_mirror_file_list: "{{ __s3_signed_uris.results | json_query('[*].url') | list  }}"
