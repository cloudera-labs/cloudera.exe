---

# Copyright 2023 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Ensure paths exist for File downloads to match required object structure [ will retry while utility VM boots ]
  loop: "{{ globals.auto_repo_mirror_targets }}"
  loop_control:
    loop_var: __tmp_mirror_dir_item
  ansible.builtin.file:
    path: "/tmp/{{ globals.utility_bucket_name }}{{ __tmp_mirror_dir_item | urlsplit('path') | dirname }}"
    state: directory

- name: Request Async Download of Files to path structure
  when: globals.auto_repo_mirror_targets
  register: __auto_repo_mirror_rehost_results
  loop: "{{ globals.auto_repo_mirror_targets }}"
  loop_control:
    loop_var: __mirror_fetch_item
  async: 7200
  poll: 0
  ansible.builtin.get_url:
    url: "{{ __mirror_fetch_item }}"
    dest: "/tmp/{{ globals.utility_bucket_name }}{{ __mirror_fetch_item | urlsplit('path') }}"
    url_username: "{{ cloudera_manager_repo_username | default(omit) }}"
    url_password: "{{ cloudera_manager_repo_password | default(omit)  }}"

- name: Track async downloads to completion  [ This may take up to an hour the first time for multi-gb Parcels ]
  loop: "{{ __auto_repo_mirror_rehost_results.results }}"
  loop_control:
    loop_var: __download_async_item
  register: __async_download_results
  until: __async_download_results.finished is defined and __async_download_results.finished
  delay: 30
  retries: 240
  async_status:
    jid: "{{ __download_async_item.ansible_job_id }}"
  failed_when:
    - __download_async_item.failed == True
    - __download_async_item.status_code != 404
    - __download_async_item.finished != 1

# Unpack parcel tarballs
- name: Unpack parcel tarballs for convenient use
  loop: "{{ globals.auto_repo_mirror_targets | select('search', 'parcels.tar.gz') | list }}"
  loop_control:
    loop_var: __parcel_unpack_item
  ansible.builtin.unarchive:
    extra_opts: [ --strip-components=1 ]
    remote_src: yes
    src: "/var/www/html{{ __parcel_unpack_item | urlsplit('path') }}"
    dest: "/var/www/html{{ __parcel_unpack_item | urlsplit('path') | dirname }}"
    keep_newer: yes

- name: Upload Download Mirror for AWS to S3
  when: globals.infra_type == 'aws'
  block:
    # Prepare to sync cache dir to S3
    - name: Setup System Rhel8
      ignore_errors: true  # newer versions of rhel8 do not need or have epel-release
      when:
        - ansible_os_family == 'RedHat'
        - ansible_distribution_major_version | int >= 8
      become: yes
      ansible.builtin.package:
        lock_timeout: 180
        name: "{{ __package_item }}"
        update_cache: yes
        state: present
      loop_control:
        loop_var: __package_item
      loop:
        - epel-release
        - python3

    - name: Setup system Rhel7
      when:
        - ansible_os_family == 'RedHat'
        - ansible_distribution_major_version | int < 8
      become: yes
      ansible.builtin.package:
        name: "{{ __package_item }}"
        state: present
        lock_timeout: "{{ (ansible_os_family == 'RedHat') | ternary(180, omit) }}"
      loop_control:
        loop_var: __package_item
      loop:
        - epel-release
        - python-pip

    - name: Setup system Debian
      when: ansible_os_family == "Debian"
      block:
        - name: enable Debian Repos
          become: yes
          apt_repository:
            repo: "{{ __repo_item }}"
          loop_control:
            loop_var: __repo_item
          loop:
            - "deb http://archive.ubuntu.com/ubuntu/ {{ globals.dynamic_inventory.vm.os }} universe"
            - "deb http://archive.ubuntu.com/ubuntu/ {{ globals.dynamic_inventory.vm.os }}-updates universe"
            - "deb http://security.ubuntu.com/ubuntu/ {{ globals.dynamic_inventory.vm.os }}-security universe"

        - name: Install Pip on Debian
          become: yes
          ansible.builtin.apt:
            update_cache: yes
            name: python3-pip
            state: present

    - name: Prepare host for s3 actions
      become: yes
      ansible.builtin.pip:
        name: "{{ __pip_item }}"
      loop_control:
        loop_var: __pip_item
      loop:
        - futures
        - "{{ (ansible_python_version[0] == '2') | ternary('boto3 >= 1.4.4,<1.18', 'boto3 >= 1.20.0') }}"

    - name: Sync downloaded Files paths to S3 cache bucket
      become: yes
      community.aws.s3_sync:
        bucket: "{{ globals.utility_bucket_name }}"
        file_root: "/tmp/{{ globals.utility_bucket_name }}"
        permission: private
