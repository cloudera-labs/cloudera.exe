# Copyright 2024 Cloudera, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: Install supported Python
  when:
    prereq_python_upgrade and
    prereq_python_supported is not contains(
      [
        ansible_python["version"]["major"],
        ansible_python["version"]["minor"]
      ] |
      join(".")
    )
  vars:
    __python_version: "{{ prereq_python_supported | first | string }}"
  block:
    - name: Install supported version of Python3
      when:
        prereq_python_supported |
        first |
        ansible.builtin.split(".") |
        first == "3"
      block:
        - name: Install Python3 package
          when: python_packages is defined
          ansible.builtin.package:
            name: "{{ python_packages }}"
            state: present

        - name: Install Python3 from source
          when: python_packages is not defined
          block:
            - name: Ensure required dependencies are installed
              ansible.builtin.package:
                name:
                  - build-essential
                  - zlib1g-dev
                  - libncurses5-dev
                  - libgdbm-dev
                  - libnss3-dev
                  - libssl-dev
                  - libreadline-dev
                  - libffi-dev
                  - curl
                  - libsqlite3-dev
                  - libbz2-dev
                state: present
                update_cache: true

            - name: Extract Python3 source
              ansible.builtin.unarchive:
                src: https://www.python.org/ftp/python/{{ __python_version }}/Python-{{ __python_version }}.tgz
                dest: /tmp
                remote_src: true

            - name: Configure Python3 for installation
              ansible.builtin.command: ./configure --enable-optimizations
              args:
                chdir: /tmp/Python-{{ __python_version }}
              changed_when: true

            - name: Build Python3 'all' target with extra arguments
              community.general.make:
                chdir: /tmp/Python-{{ __python_version }}
                target: altinstall

    - name: Install supported version of Python2
      when:
        prereq_python_supported |
        first |
        ansible.builtin.split(".") |
        first == "2"
      block:
        # Most likely need to update this to use get-pip.py and the like
        - name: Install Python2 package
          when: python_packages is defined
          ansible.builtin.package:
            name: "{{ python_packages }}"
            state: present

        - name: Install Python2 from source
          when: python_packages is not defined
          block:
            - name: Ensure required dependencies are installed
              ansible.builtin.package:
                name:
                  - build-essential
                  - zlib1g-dev
                  - libncurses5-dev
                  - libgdbm-dev
                  - libnss3-dev
                  - libssl-dev
                  - libreadline-dev
                  - libffi-dev
                  - curl
                  - libsqlite3-dev
                  - libbz2-dev
                state: present
                update_cache: true

            - name: Extract Python2 source
              ansible.builtin.unarchive:
                src: https://www.python.org/ftp/python/{{ __python_version }}/Python-{{ __python_version }}.tgz
                dest: /tmp
                remote_src: true

            - name: Configure Python2 for installation
              ansible.builtin.command: ./configure --enable-optimizations
              args:
                chdir: /tmp/Python-{{ __python_version }}
              changed_when: true

            - name: Build Python2 'all' target with extra arguments
              community.general.make:
                chdir: /tmp/Python-{{ __python_version }}
                target: altinstall

# TODO Confirm Python2-pip package names
- name: Ensure pip is installed
  ansible.builtin.package:
    name: "{{ python_pip_packages | default('python3-pip') }}"
    state: present
