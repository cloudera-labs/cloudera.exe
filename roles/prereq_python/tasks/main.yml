---
# Copyright 2024 Cloudera, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Gather distribution and Python details
  ansible.builtin.setup:
    gather_subset:
      - distribution
      - python

- name: Gather supported Python versions for Cloudera Runtime and Manager versions and OS
  ansible.builtin.set_fact:
    prereq_python_supported: "{{ supported_cms | intersect(supported_runtime) | sort | list }}"
  vars:
    supported_cms: "{{
      lookup('cloudera.exe.supported', 'products', product='cloudera_manager', version=cloudera_manager_version, raw_filters=['OPERATING_SYSTEMS=' + supported_os + '-' + ansible_facts['distribution_version']]) |
      selectattr('product_name', 'eq', 'Python') |
      map(attribute='version') |
      unique |
      list
    }}"
    supported_runtime: "{{
      lookup('cloudera.exe.supported', 'products', product='cloudera_runtime', version=cloudera_runtime_version, raw_filters=['OPERATING_SYSTEMS=' + supported_os + '-' + ansible_facts['distribution_version']]) |
      selectattr('product_name', 'eq', 'Python') |
      map(attribute='version') |
      unique |
      list
    }}"
    supported_os: "{{ prereq_python_supported_os_map[ansible_facts['distribution']] | default(ansible_facts['distribution']) }}"

# - name: Validate specified Python against supported versions
#   when: python_version is defined
#   ansible.builtin.assert:
#     that:
#       -  prereq_python_supported is contains(python_split[:2] | join("."))
#     failed_msg:
#       "Python version {{ python_version }} is not supported for Cloudera Manager
#       {{ cloudera_manager_version }} and/or Cloudera Runtime {{ cloudera_runtime_version }}"
#   vars:
#     python_version_split: "{{ python_version | ansible.builtin.split('.') }}"

- name: Update or install Python
  when:

    # (
    #   python_version is defined and
    #   python_version is not version(ansible_python_version, "eq", version_type="pep440")
    # ) or (
    prereq_python_upgrade and
    prereq_python_supported is not contains(
      [
        ansible_python["version"]["major"],
        ansible_python["version"]["minor"]
      ] |
      join(".")
    )
    # )
  ansible.builtin.include_tasks: "{{ item }}"
  with_first_found:
    - "{{ ansible_facts['distribution'] }}-{{ ansible_facts['distribution_version'] }}.yml"
    - "{{ ansible_facts['distribution'] }}-{{ ansible_facts['distribution_major_version'] }}.yml"
    - "{{ ansible_facts['distribution'] }}.yml"
    - "{{ ansible_facts['os_family'] }}-{{ ansible_facts['distribution_version'] }}.yml"
    - "{{ ansible_facts['os_family'] }}-{{ ansible_facts['distribution_major_version'] }}.yml"
    - "{{ ansible_facts['os_family'] }}.yml"
    - "default.yml"

- name: Ensure pip is upgraded
  ansible.builtin.pip:
    name: pip
    extra_args: --upgrade
