# Copyright 2024 Cloudera, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Load support matrix variables for OS
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ role_path }}/../prereq_supported/vars/{{ ansible_facts['distribution'] }}-{{ ansible_facts['distribution_version'] }}.yml"
    - "{{ role_path }}/../prereq_supported/vars/{{ ansible_facts['distribution'] }}-{{ ansible_facts['distribution_major_version'] }}.yml"
    - "{{ role_path }}/../prereq_supported/vars/{{ ansible_facts['distribution'] }}.yml"
    - "{{ role_path }}/../prereq_supported/vars/{{ ansible_facts['os_family'] }}-{{ ansible_facts['distribution_version'] }}.yml"
    - "{{ role_path }}/../prereq_supported/vars/{{ ansible_facts['os_family'] }}-{{ ansible_facts['distribution_major_version'] }}.yml"
    - "{{ role_path }}/../prereq_supported/vars/{{ ansible_facts['os_family'] }}.yml"
    - "{{ role_path }}/../prereq_supported/vars/default.yml"

- name: Set required python version for specified runtime and manager versions
  ansible.builtin.set_fact:
    __required_python_version: >-
      {{
        support_matrix |
        selectattr('manager_version', 'ansible.builtin.version', cloudera_manager_version) |
        selectattr('runtime_version', 'ansible.builtin.version', cloudera_runtime_version) |
        map(attribute='python_version') |
        first
      }}
    __required_python2_version: >-
      {{
        (
          support_matrix |
          selectattr('manager_version', 'ansible.builtin.version', cloudera_manager_version) |
          selectattr('runtime_version', 'ansible.builtin.version', cloudera_runtime_version) |
          map(attribute='python2') |
          first
        ) |
        default(omit)
      }}
    __python3_version: "{{ ansible_python_version }}"
  vars:
    cm_version: "{{ cloudera_manager_version | cloudera.exe.cm_version }}"

- name: If required check if Python2 is installed
  when:
    - __required_python2_version is defined
  block:
    - name: Check python2 version
      ansible.builtin.command: python2 --version
      register: __py2_check
      changed_when: false
      ignore_errors: true

    - name: Set facts for Python versions
      ansible.builtin.set_fact:
        __python2_installed: "{{ __py2_check.rc == 0 }}"
        __python2_version: "{{ (__py2_check.stdout.split(' ')[1]) if __py2_check.rc == 0 else '0.0.0' }}"

- name: Print Python versions
  ansible.builtin.debug:
    msg:
      - "Required Python version: {{ __required_python_version }}"
      - "Python version installed: {{ __python3_version }}"
      - "Python2 required: {{ True if __required_python2_version is defined else False }}"
      - "Python2 vesion installed: {{ __python2_version if __python2_version is defined else 'N/A' }}"
    verbosity: 2

- name: Include OS-specific tasks to update or install Python
  ansible.builtin.include_tasks: "{{ item }}"
  with_first_found:
    - "{{ ansible_facts['distribution'] }}-{{ ansible_facts['distribution_version'] }}.yml"
    - "{{ ansible_facts['distribution'] }}-{{ ansible_facts['distribution_major_version'] }}.yml"
    - "{{ ansible_facts['distribution'] }}.yml"
    - "{{ ansible_facts['os_family'] }}-{{ ansible_facts['distribution_version'] }}.yml"
    - "{{ ansible_facts['os_family'] }}-{{ ansible_facts['distribution_major_version'] }}.yml"
    - "{{ ansible_facts['os_family'] }}.yml"
    - "default.yml"
