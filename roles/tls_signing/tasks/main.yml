# Copyright 2024 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

# TODO: Check index.txt.attr and see if unique_subject = no for intermediate ca

- name: Set fact for all CSRs to sign
  ansible.builtin.set_fact:
    __csrs_to_sign: "{{ (__csrs_to_sign | default([])) + ([csr_item]) }}"
  vars:
    csr_item:
      local_file: "{{ item }}"
      csr_filename: "{{ item | basename }}"
      file_suffix: "{{ item | basename | splitext | first }}"
  loop: "{{ csrs_to_sign }}"

- name: Copy all CSRs from controller to CA server
  when: copy_from_controller
  ansible.builtin.copy:
    src: "{{ item.local_file }}"
    dest: "{{ ca_server_intermediate_path_csr }}/{{ item.csr_filename }}"
    mode: 0644
  loop: "{{ __csrs_to_sign }}"

- name: Sign CSRs
  community.crypto.x509_certificate:
    path: "{{ ca_server_intermediate_path_certs }}/{{ item.file_suffix }}.pem"
    csr_path: "{{ ca_server_intermediate_path_csr }}/{{ item.csr_filename }}"
    backup: "{{ backup_old_certs }}"
    provider: ownca
    ownca_path: "{{ ca_server_intermediate_cert }}"
    ownca_privatekey_path: "{{ ca_server_intermediate_private_key }}"
    ownca_privatekey_passphrase: "{{ ca_server_intermediate_private_key_password }}"
    selfsigned_not_after: "+730d"
  loop: "{{ __csrs_to_sign }}"
  register: __signed_certs

- name: Bring signed certs back to controller
  ansible.builtin.fetch:
    src: "{{ ca_server_intermediate_path_certs }}/{{ item.file_suffix }}.pem"
    dest: "{{ local_certs_dir }}/{{ item.file_suffix }}.pem"
    flat: yes
  loop: "{{ __csrs_to_sign }}"
