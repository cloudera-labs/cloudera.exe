# ------- AWS Cross Account Policy -------
# The policy here is a dict variable so we'll use the variable
# directly in the aws_iam_policy resource.
resource "aws_iam_policy" "{{ plat__aws_xaccount_policy_name }}" {
    name        = "{{ plat__aws_xaccount_policy_name }}"
    description = "CDP Cross Account policy for {{ plat__namespace }}"

    tags        = merge(var.env_tags,{Name = "{{ plat__aws_xaccount_policy_name }}"})

    policy      = <<EOF
{{ plat__aws_xaccount_account_policy | tojson }}
EOF
}

# ------- CDP IDBroker Assume Role policy -------
# First create the assume role policy document
data "aws_iam_policy_document" "{{ plat__aws_idbroker_policy_name }}-policy-doc" {
  version       = "2012-10-17"
  
  statement {
    sid         = "VisualEditor0"
    actions     = ["sts:AssumeRole"]
    effect      = "Allow"
    resources   = ["*"]
  }
}
# Then create the policy using the document
resource "aws_iam_policy" "{{ plat__aws_idbroker_policy_name }}" {
    name        = "{{ plat__aws_idbroker_policy_name }}"
    description = "CDP IDBroker Assume Role policy for {{ plat__namespace }}"

    tags        = merge(var.env_tags,{Name = "{{ plat__aws_idbroker_policy_name }}"})

    policy      = data.aws_iam_policy_document.{{ plat__aws_idbroker_policy_name }}-policy-doc.json
}

# ------- CDP Data Access Policies - Log -------
resource "aws_iam_policy" "{{ plat__aws_log_location_policy_name }}" {
    name        = "{{ plat__aws_log_location_policy_name }}"
    description = "CDP Log Location Access policy for {{ plat__namespace }}"

    tags        = merge(var.env_tags,{Name = "{{ plat__aws_log_location_policy_name }}"})

    policy      = file("{{ "./policy_docs/" ~ (__aws_policy_documents | json_query("results[?__policy_url_item.key==`log`].dest | [0]") | basename) }}")
}

# ------- CDP Data Access Policies - ranger_audit_s3 -------
resource "aws_iam_policy" "{{ plat__aws_ranger_audit_s3_policy_name }}" {
    name        = "{{ plat__aws_ranger_audit_s3_policy_name }}"
    description = "CDP Ranger Audit S3 Access policy for {{ plat__namespace }}"

    tags        = merge(var.env_tags,{Name = "{{ plat__aws_ranger_audit_s3_policy_name }}"})

    policy      = file("{{ "./policy_docs/" ~ (__aws_policy_documents | json_query("results[?__policy_url_item.key==`ranger_audit_s3`].dest | [0]") | basename) }}")
}

# ------- CDP Data Access Policies - datalake_admin_s3 -------
resource "aws_iam_policy" "{{ plat__aws_datalake_admin_s3_policy_name }}" {
    name        = "{{ plat__aws_datalake_admin_s3_policy_name }}"
    description = "CDP Datalake Admin S3 Access policy for {{ plat__namespace }}"

    tags        = merge(var.env_tags,{Name = "{{ plat__aws_datalake_admin_s3_policy_name }}"})

    policy      = file("{{ "./policy_docs/" ~ (__aws_policy_documents | json_query("results[?__policy_url_item.key==`datalake_admin_s3`].dest | [0]") | basename) }}")
}

# ------- CDP Data Access Policies - bucket_access -------
resource "aws_iam_policy" "{{ plat__aws_bucket_access_policy_name }}" {
    name        = "{{ plat__aws_bucket_access_policy_name }}"
    description = "CDP Bucket S3 Access policy for {{ plat__namespace }}"

    tags        = merge(var.env_tags,{Name = "{{ plat__aws_bucket_access_policy_name }}"})

    policy      = file("{{ "./policy_docs/" ~ (__aws_policy_documents | json_query("results[?__policy_url_item.key==`bucket_access`].dest | [0]") | basename) }}")
}
