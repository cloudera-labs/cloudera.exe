# ------- Cross Account Role -------
# First create the assume role policy document
data "aws_iam_policy_document" "{{ plat__aws_xaccount_role_name }}-policy-doc" {
  version       = "2012-10-17"
  
  statement {
    actions = ["sts:AssumeRole"]
    effect  = "Allow"

    principals {
      type          = "AWS"
      identifiers   = ["arn:aws:iam::{{ plat__aws_xaccount_account_id }}:root"]
    }

    condition {
      test     = "StringEquals"
      variable = "sts:ExternalId"

      values   = ["{{ plat__aws_xaccount_external_id }}"]
    }
  }
}

# Create the IAM role that uses the above assume_role_policy document
resource "aws_iam_role" "{{ plat__aws_xaccount_role_name }}" {
    name                = "{{ plat__aws_xaccount_role_name }}"
    description         = "CDP Cross Account role for {{ plat__namespace }}"  

    assume_role_policy  = data.aws_iam_policy_document.{{ plat__aws_xaccount_role_name }}-policy-doc.json

    tags                = merge(var.env_tags,{Name = "{{ plat__aws_xaccount_role_name }}"})
}

# Attach AWS Cross Account Policy to Cross Account Role
resource "aws_iam_role_policy_attachment" "{{ plat__aws_xaccount_role_name }}-attach" {
  role       = aws_iam_role.{{ plat__aws_xaccount_role_name }}.name
  policy_arn = aws_iam_policy.{{ plat__aws_xaccount_policy_name }}.arn
}

# ------- AWS Service Roles - CDP IDBroker -------
# First create the Assume role policy document
data "aws_iam_policy_document" "{{ plat__aws_idbroker_role_name }}-policy-doc" {
  version       = "2012-10-17"
  
  statement {
    actions = ["sts:AssumeRole"]
    effect  = "Allow"

    principals {
      type          = "Service"
      identifiers   = ["ec2.amazonaws.com"]
    }
  }
}

# Create the IAM role that uses the above assume_role_policy document
resource "aws_iam_role" "{{ plat__aws_idbroker_role_name }}" {
    name                = "{{ plat__aws_idbroker_role_name }}"
    description         = "CDP IDBroker role for {{ plat__namespace }}"  

    assume_role_policy  = data.aws_iam_policy_document.{{ plat__aws_idbroker_role_name }}-policy-doc.json

    tags                = merge(var.env_tags,{Name = "{{ plat__aws_idbroker_role_name }}"})
}

# Create an instance profile for the iam_role
resource "aws_iam_instance_profile" "{{ plat__aws_idbroker_role_name }}-instance-profile" {
  name = "{{ plat__aws_idbroker_role_name }}"
  role = aws_iam_role.{{ plat__aws_idbroker_role_name }}.name
}

# Attach CDP IDBroker Assume Policy to the Role
resource "aws_iam_role_policy_attachment" "{{ plat__aws_idbroker_role_name }}-attach1" {
  role       = aws_iam_role.{{ plat__aws_idbroker_role_name }}.name
  policy_arn = aws_iam_policy.{{ plat__aws_idbroker_policy_name }}.arn
}

# Attach AWS Log Location Policy to the Role
resource "aws_iam_role_policy_attachment" "{{ plat__aws_idbroker_role_name }}-attach2" {
  
  role       = aws_iam_role.{{ plat__aws_idbroker_role_name }}.name
  policy_arn = aws_iam_policy.{{ plat__aws_log_location_policy_name }}.arn
}

# ------- AWS Service Roles - CDP Log -------
# First create the Assume role policy document
data "aws_iam_policy_document" "{{ plat__aws_log_role_name }}-policy-doc" {
  version       = "2012-10-17"
  
  statement {
    actions = ["sts:AssumeRole"]
    effect  = "Allow"

    principals {
      type          = "Service"
      identifiers   = ["ec2.amazonaws.com"]
    }
  }
}

# Create the IAM role that uses the above assume_role_policy document
resource "aws_iam_role" "{{ plat__aws_log_role_name }}" {
    name                = "{{ plat__aws_log_role_name }}"
    description         = "CDP Log role for {{ plat__namespace }}"  

    assume_role_policy  = data.aws_iam_policy_document.{{ plat__aws_log_role_name }}-policy-doc.json

    tags                = merge(var.env_tags,{Name = "{{ plat__aws_log_role_name }}"})
}

# Create an instance profile for the iam_role
resource "aws_iam_instance_profile" "{{ plat__aws_log_role_name }}-instance-profile" {
  name = "{{ plat__aws_log_role_name }}"
  role = aws_iam_role.{{ plat__aws_log_role_name }}.name
}

# Attach AWS Log Location Policy to the Role
resource "aws_iam_role_policy_attachment" "{{ plat__aws_log_role_name }}-attach1" {
  
  role       = aws_iam_role.{{ plat__aws_log_role_name }}.name
  policy_arn = aws_iam_policy.{{ plat__aws_log_location_policy_name }}.arn
}

# Attach AWS Buckey Access Policy to the Role
resource "aws_iam_role_policy_attachment" "{{ plat__aws_log_role_name }}-attach2" {
  
  role       = aws_iam_role.{{ plat__aws_log_role_name }}.name
  policy_arn = aws_iam_policy.{{ plat__aws_bucket_access_policy_name }}.arn
}

# ------- AWS Data Access Roles - CDP Datalake Admin -------
# First create the Assume role policy document
data "aws_iam_policy_document" "{{ plat__aws_datalake_admin_role_name }}-policy-doc" {
  version       = "2012-10-17"
  
  statement {
    actions = ["sts:AssumeRole"]
    effect  = "Allow"

    principals {
      type          = "AWS"
      identifiers   = ["arn:aws:iam::{{ plat__aws_caller_account }}:role/{{ plat__aws_idbroker_role_name }}"]
    }
  }
}

# Create the IAM role that uses the above assume_role_policy document
resource "aws_iam_role" "{{ plat__aws_datalake_admin_role_name }}" {
    name                = "{{ plat__aws_datalake_admin_role_name }}"
    description         = "CDP Datalake Admin role for {{ plat__namespace }}"  

    assume_role_policy  = data.aws_iam_policy_document.{{ plat__aws_datalake_admin_role_name }}-policy-doc.json

    tags                = merge(var.env_tags,{Name = "{{ plat__aws_datalake_admin_role_name }}"})
}

# Create an instance profile for the iam_role
resource "aws_iam_instance_profile" "{{ plat__aws_datalake_admin_role_name }}-instance-profile" {
  name = "{{ plat__aws_datalake_admin_role_name }}"
  role = aws_iam_role.{{ plat__aws_datalake_admin_role_name }}.name
}

# Attach AWS Datalake Admin S3 Policy to the Role
resource "aws_iam_role_policy_attachment" "{{ plat__aws_datalake_admin_role_name }}-attach1" {
  
  role       = aws_iam_role.{{ plat__aws_datalake_admin_role_name }}.name
  policy_arn = aws_iam_policy.{{ plat__aws_datalake_admin_s3_policy_name }}.arn
}

# Attach AWS Bucket Access Policy to the Role
resource "aws_iam_role_policy_attachment" "{{ plat__aws_datalake_admin_role_name }}-attach2" {
  
  role       = aws_iam_role.{{ plat__aws_datalake_admin_role_name }}.name
  policy_arn = aws_iam_policy.{{ plat__aws_bucket_access_policy_name }}.arn
}

# ------- AWS Data Access Roles - CDP Ranger Audit -------
# First create the Assume role policy document
data "aws_iam_policy_document" "{{ plat__aws_ranger_audit_role_name }}-policy-doc" {
  version       = "2012-10-17"
  
  statement {
    actions = ["sts:AssumeRole"]
    effect  = "Allow"

    principals {
      type          = "AWS"
      identifiers   = ["arn:aws:iam::{{ plat__aws_caller_account }}:role/{{ plat__aws_idbroker_role_name }}"]
    }
  }
}

# Create the IAM role that uses the above assume_role_policy document
resource "aws_iam_role" "{{ plat__aws_ranger_audit_role_name }}" {
    name                = "{{ plat__aws_ranger_audit_role_name }}"
    description         = "CDP Ranger Audit role for {{ plat__namespace }}"  

    assume_role_policy  = data.aws_iam_policy_document.{{ plat__aws_ranger_audit_role_name }}-policy-doc.json

    tags                = merge(var.env_tags,{Name = "{{ plat__aws_ranger_audit_role_name }}"})
}

# Create an instance profile for the iam_role
resource "aws_iam_instance_profile" "{{ plat__aws_ranger_audit_role_name }}-instance-profile" {
  name = "{{ plat__aws_ranger_audit_role_name }}"
  role = aws_iam_role.{{ plat__aws_ranger_audit_role_name }}.name
}

# Attach AWS Ranger Audit S3 Policy to the Role
resource "aws_iam_role_policy_attachment" "{{ plat__aws_ranger_audit_role_name }}-attach1" {
  
  role       = aws_iam_role.{{ plat__aws_ranger_audit_role_name }}.name
  policy_arn = aws_iam_policy.{{ plat__aws_ranger_audit_s3_policy_name }}.arn
}

# Attach AWS Bucket Access Policy to the Role
resource "aws_iam_role_policy_attachment" "{{ plat__aws_ranger_audit_role_name }}-attach2" {
  
  role       = aws_iam_role.{{ plat__aws_ranger_audit_role_name }}.name
  policy_arn = aws_iam_policy.{{ plat__aws_bucket_access_policy_name }}.arn
}
