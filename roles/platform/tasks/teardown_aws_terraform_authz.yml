---

# Copyright 2021 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Remove CDP Cross Account Credential for AWS
  when: plat__teardown_deletes_credential
  cloudera.cloud.env_cred:
    name: "{{ plat__xacccount_credential_name }}"  # TODO: Make specific to AWS Teardown as credentials can be for multiple environments
    state: absent

- name: Confirm I got to setup_aws_terraform
  ansible.builtin.debug:
    msg: 
      - "I'm here doing to terraform destroy"
      - "Here's the workspace: {{ plat__terraform_workspace_dir }}"

# When remote state use temp dir for terraform workspace
- name: Create Terraform workspace for remote state
  when: plat__terraform_state_storage in ['remote_s3']
  block:
  - name: Create a temporary directory for Terraform workspace
    ansible.builtin.tempfile:
      prefix: "tf_plat_workspace"
      state: directory
    register: __tf_plat_tmpdir

  - name: Copy the Terraform code to __tf_plat_tmpdir
    ansible.builtin.copy:
      src: "{{ plat__terraform_template_dir }}/plat/"
      dest: "{{ __tf_plat_tmpdir.path }}/"

- name: Create Terraform workspace for local state
  when: plat__terraform_state_storage == 'local'
  block:
  - name: Check if Terraform workspace directory exists
    ansible.builtin.stat: 
      path: "{{ plat__terraform_workspace_dir }}/workspace/plat"
    register: workdir

  - name: Ensure the Terraform workspace directory exists
    ansible.builtin.copy:
      src: "{{ plat__terraform_template_dir }}/plat/"
      dest: "{{ plat__terraform_workspace_dir }}/workspace/plat"
    # when: not workdir.stat.exists # TODO: This won't override if any changes to .tf are made. Good or Bad?

- name: Prompt added by jenright for local state
  ansible.builtin.pause:
    prompt: "Ready to do Terraform apply on role files in {{ plat__terraform_workspace_dir }}/workspace/plat"
  when: 
  - plat__terraform_state_storage == 'local'
  - debug_terraform | default(false) | bool

- name: Prompt added by jenright for remote state
  ansible.builtin.pause:
    prompt: "Ready to do Terraform apply on role files in {{ __tf_plat_tmpdir.path }}"
  when: 
  - plat__terraform_state_storage in ['remote_s3']
  - debug_terraform | default(false) | bool

- name: Destroy Terraform authz resources
  community.general.terraform:
    project_path: "{{ plat__terraform_workspace_dir +'/workspace/plat' if (plat__terraform_state_storage == 'local') else __tf_plat_tmpdir.path }}"
    state: "absent"
    force_init: yes
  register: tf_result
  retries: 3
  delay: 10
  until: tf_result is succeeded

- name: Prompt added by jenright 
  ansible.builtin.pause:
    prompt: "Terraform destroy on role files complete. Check AWS Console."
  when: debug_terraform | default(false) | bool

- name: Remove the Terraform template directory
  ansible.builtin.file:
    path: "{{ plat__terraform_template_dir }}/plat/"
    state: absent

- name: Remove the Terraform workspace directory for local state
  ansible.builtin.file:
    path: "{{ plat__terraform_workspace_dir }}/workspace/plat"
    state: absent
  when: plat__terraform_state_storage == 'local'

- name: Remove the Terraform workspace directory for remote state
  ansible.builtin.file:
    path: "{{ __tf_plat_tmpdir.path }}"
    state: absent
  when: plat__terraform_state_storage in ['remote_s3']
    
# TODO: Figure out how to handle below conditional with Terraform
# - name: Tear down AWS Cross Acount
#   when: plat__teardown_deletes_xaccount
#   block:
#     - name: Remove AWS Cross Account Role
#       community.aws.iam_role:
#         name: "{{ plat__aws_xaccount_role_name }}"
#         region: "{{ plat__region }}"
#         state: absent

#     - name: Remove AWS Cross Account Policy
#       community.aws.iam_managed_policy:
#         region: "{{ plat__region }}"
#         policy_name: "{{ plat__aws_xaccount_policy_name }}"
#         state: absent