---

# Copyright 2021 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TODO - Consider using the two-step initialization process for checking existing Ansible role variables vs. lookup (or declaration like below)
- name: Set facts for AWS deployment
  ansible.builtin.set_fact:
    plat__aws_caller_account: "{{ __aws_caller_info.account }}"
    plat__aws_storage_location: "s3a://{{ plat__storage_name }}"
    plat__aws_idbroker_instance_profile_arn: "arn:aws:iam::{{ __aws_caller_info.account }}:instance-profile/{{ plat__aws_idbroker_role_name }}"
    plat__aws_log_instance_profile_arn: "arn:aws:iam::{{ __aws_caller_info.account }}:instance-profile/{{ plat__aws_log_role_name }}"
    plat__aws_idbroker_role_arn: "arn:aws:iam::{{ __aws_caller_info.account }}:role/{{ plat__aws_idbroker_role_name }}"
    plat__aws_datalake_admin_role_arn: "arn:aws:iam::{{ __aws_caller_info.account }}:role/{{ plat__aws_datalake_admin_role_name }}"
    plat__aws_ranger_audit_role_arn: "arn:aws:iam::{{ __aws_caller_info.account }}:role/{{ plat__aws_ranger_audit_role_name }}"

- name: Discover CDP Cross Account information
  when: not plat__cdp_xaccount_external_id and not plat__cdp_xaccount_account_id
  block:
    - name: Fetch CDP Cross Account prerequisites for AWS
      cloudera.cloud.account_cred_info:
        cloud: aws
      register: __cdp_aws_credential_prereq
      failed_when: __cdp_aws_credential_prereq is undefined

    - name: Set facts for CDP Cross Account variables
      ansible.builtin.set_fact:
        plat__aws_xaccount_external_id: "{{ __cdp_aws_credential_prereq.prerequisites.external_id }}"
        plat__aws_xaccount_account_id: "{{ __cdp_aws_credential_prereq.prerequisites.account_id }}"
        plat__aws_xaccount_account_policy: "{{ __cdp_aws_credential_prereq.prerequisites.policy | b64decode }}"

# TODO - Handle if XAccount External and Account ID are provided - where is Account Policy defined?
- name: Set facts for CDP Cross Account information by assignment
  when: plat__cdp_xaccount_external_id is string and plat__cdp_xaccount_account_id is string
  ansible.builtin.set_fact:
    plat__aws_xaccount_external_id: "{{ plat__cdp_xaccount_external_id }}"
    plat__aws_xaccount_account_id: "{{ plat__cdp_xaccount_account_id }}"

# TODO - Confirm the two following tasks are the design pattern we want: checking for a set_fact from another role before establishing its own role fact
- name: Discover AWS VPC
  when: infra__aws_vpc_id is undefined
  block:
    - name: Query AWS VPC
      amazon.aws.ec2_vpc_net_info:
        region: "{{ plat__region }}"
        filters:
          "tag:Name": "{{ plat__vpc_name }}"
      register: __aws_vpc_info

    - name: Set fact for AWS VPC ID
      when: __aws_vpc_info is defined
      ansible.builtin.set_fact:
        plat__aws_vpc_id: "{{ __aws_vpc_info.vpcs[0].id }}"

- name: Set fact for AWS VPC ID by assignment
  when: infra__aws_vpc_id is defined
  ansible.builtin.set_fact:
    plat__aws_vpc_id: "{{ infra__aws_vpc_id }}"

- name: Discover AWS VPC Subnets
  when: infra__aws_subnet_ids is undefined
  block:
    - name: Query AWS Subnets
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ plat__region }}"
        filters:
          "tag:Name": "{{ plat__namespace }}"
      register: __aws_subnets_info

    - name: Set fact for AWS Subnet IDs
      when: __aws_subnets_info is defined
      ansible.builtin.set_fact:
        plat__aws_subnet_ids: "{{ plat__aws_subnet_ids | default([]) | union([__aws_subnet_item.subnet.id | default('')]) }}"
      loop_control:
        loop_var: __aws_subnet_item
        label: "{{ __aws_subnet_item.subnet.id }}"
      loop: "{{ __aws_subnets_info.subnets }}"

- name: Set fact for AWS Subnet IDs by assignment
  when: infra__aws_subnet_ids is defined
  ansible.builtin.set_fact:
    plat__aws_subnet_ids: "{{ infra__aws_subnet_ids }}"

- name: Set public subnets for public endpoint access
  when: plat__public_endpoint_access
  ansible.builtin.set_fact:
    plat__aws_public_subnet_ids: "{{ infra__aws_public_subnet_ids }}"
    plat__endpoint_access_scheme: "PUBLIC"

- name: Discover AWS Security Group for Knox
  when: infra__aws_security_group_knox_id is undefined
  block:
    - name: Query AWS Security Group for Knox
      amazon.aws.ec2_group_info:
        region: "{{ plat__region }}"
        filters:
          group-name: "{{ plat__security_group_knox_name }}"
      register: __aws_security_group_knox_info

    - name: Set fact for AWS Security Group ID for Knox
      when: __aws_security_group_knox_info is defined
      ansible.builtin.set_fact:
        plat__aws_security_group_knox_id: "{{ __aws_security_group_knox_info.security_groups[0].group_id }}"

- name: Set fact for AWS Security Group ID for Knox by assignment
  when: infra__aws_security_group_knox_id is defined
  ansible.builtin.set_fact:
    plat__aws_security_group_knox_id: "{{ infra__aws_security_group_knox_id }}"

- name: Discover AWS Security Group for Default
  when: infra__aws_security_group_default_id is undefined
  block:
    - name: Query AWS Security Group for Default
      amazon.aws.ec2_group_info:
        region: "{{ plat__region }}"
        filters:
          group-name: "{{ plat__security_group_default_name }}"
      register: __aws_security_group_default_info

    - name: Set fact for AWS Security Group ID for Default
      when: __aws_security_group_default_info is defined
      ansible.builtin.set_fact:
        plat__aws_security_group_default_id: "{{ __aws_security_group_default_info.security_groups[0].group_id }}"

- name: Set fact for AWS Security Group ID for Default by assignment
  when: infra__aws_security_group_default_id is defined
  ansible.builtin.set_fact:
    plat__aws_security_group_default_id: "{{ infra__aws_security_group_default_id }}"
