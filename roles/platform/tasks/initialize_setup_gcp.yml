---

# Copyright 2023 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Discover available zones for GCP region
  block:
    - name: Fetch list of availability zones filtered by region
      ansible.builtin.command: >
        gcloud compute zones list --filter region={{ plat__region }} --format json
      register: __gcp_availability_zones_info

    - name: Set fact for GCP availability zones
      ansible.builtin.set_fact:
        plat__gcp_availability_zones_discovered: "{{ __gcp_availability_zones_info.stdout | from_json | map(attribute='name') | list }}"

    - name: Confirm availability zone access for CDP Environment
      when: plat__gcp_availability_zones | length > 0
      ansible.builtin.assert:
        that:
          - plat__gcp_availability_zones is subset(plat__gcp_availability_zones_discovered)
        fail_msg: "The following zone(s) are not available in region '{{ plat__region }}': {{ plat__gcp_availability_zones | difference(plat__gcp_availability_zones_discovered) | join(', ') }}"
        quiet: yes

# https://docs.cloudera.com/management-console/cloud/requirements-gcp/topics/mc-gcp_apis.html
- name: Ensure Google Services Enabled
  when: plat__gcp_enable_services | bool
  block:
    - name: Fetch list of enabled GCP Services
      command: >
        gcloud services list --enabled --project {{ plat__gcp_project }}
      register: __gcp_services_info

    - name: Determine list of missing Services
      set_fact:
        __plat_gcp_services_to_enable: "{{ __plat_gcp_services_to_enable | default([]) + ([__gcp_service_item] if __gcp_service_item not in __gcp_services_info.stdout else []) | unique }}"
      loop: "{{ plat__gcp_required_services }}"
      loop_control:
        loop_var: __gcp_service_item

    - name: Enable missing GCP Service APIs
      when: __plat_gcp_services_to_enable | length > 0
      command: >
        gcloud services enable --quiet {{ __gcp_enable_item }}
      loop: "{{ __plat_gcp_services_to_enable }}"
      loop_control:
        loop_var: __gcp_enable_item
