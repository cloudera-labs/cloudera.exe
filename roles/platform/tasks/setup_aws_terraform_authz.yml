---

# Copyright 2021 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Create a temporary directory for policy documents
  ansible.builtin.tempfile:
    prefix: "aws-policy-"
    state: directory
  register: __aws_policy_tmpdir

- name: Download AWS default policy documents
  ansible.builtin.get_url:
    dest: "{{ __aws_policy_tmpdir.path }}"
    url: "{{ __policy_url_item.value }}"
  loop_control:
    loop_var: __policy_url_item
    label: "{{ __policy_url_item.key }}"
  loop: "{{ plat__aws_policy_urls | dict2items }}"
  register: __aws_policy_documents

- name: JE Debug Print __aws_policy_tmpdir
  ansible.builtin.debug:
    var: __aws_policy_tmpdir

- name: Process AWS default policy documents
  ansible.builtin.include_tasks: aws_policy_regex.yml
  loop: "{{ __aws_policy_documents.results }}"
  loop_control:
    loop_var: __aws_policy_document_item
    label: "{{ __aws_policy_document_item.__policy_url_item.key }}"

- name: Some variables for creation of IAM
  debug:
    msg: 
      - plat__aws_xaccount_account_policy = {{ plat__aws_xaccount_account_policy }}
      - plat__aws_xaccount_policy_name = {{ plat__aws_xaccount_policy_name }}

# ***************** TERRAFORM TEMPLATE PART 2 ***********************
# Needed here because the policy documents are only available after above tasks
# QUESTION: HOW CAN WE REARRANGE THIS?
# Apply template for Terraform auth resources
- name: Generate Terraform authz file
  template:
    src: 'template/{{ plat__infra_type }}/plat_{{ infra__type }}_authz.tf.j2'
    dest: "{{ plat__terraform_tmp_dir }}/plat/plat_authz.tf"
  no_log: false

- name: Prompt added by jenright 
  pause:
    prompt: "PART 2 - Terraform role & policy files created in {{ plat__terraform_tmp_dir }}/plat"
# ***************** END TERRAFORM TEMPLATE PART 2 ***********************

# ***************** TERRAFORM APPLY ***********************
- name: Terraform local state
  # when: terraform_state == "local" # TODO: Handle state
  block:
    - name: Check if workspace directory exists
      # TODO: Fix workspace_dir_path
      # stat: path={{ plat__terraform_tmp_dir }}/workspace_dir_path
      stat: path={{ plat__terraform_tmp_dir }}/workspace/plat
      register: workdir

    - name: Ensure the workspace directory exists
      copy:
        src: "{{ plat__terraform_tmp_dir }}/plat/"
        # TODO: Fix workspace_dir_path
        # dest: "{{ plat__terraform_workspace_dir }}/{{ workspace_dir_path }}"
        dest: "{{ plat__terraform_workspace_dir }}/workspace/plat"
      # when: not workdir.stat.exists # TODO: This won't override if any changes to .tf are made. Good or Bad?

    - name: Prompt added by jenright 
      pause:
        prompt: "Ready to do Terraform apply on role files in {{ plat__terraform_workspace_dir }}/workspace/plat"

    - name: Applying terraform
      community.general.terraform:
        # TODO: Fix workspace_dir_path
        # project_path: "{{ plat__terraform_workspace_dir }}/{{ workspace_dir_path }}"
        project_path: "{{ plat__terraform_workspace_dir }}/workspace/plat"
        state: "present"
        force_init: yes
      register: tf_result
      retries: 3
      delay: 10
      until: tf_result is succeeded

    - name: Prompt added by jenright 
      pause:
        prompt: "Terraform apply on role files complete. Check AWS Console."

# ***************** END TERRAFORM APPLY ***********************

# Now need to get create CDP Cross Account Credential
# TODO: Is there a better place to put this?
# First get the AWS Cross Account Role
- name: Query the AWS Cross Account Role
  community.aws.iam_role_info:
    name: "{{ plat__aws_xaccount_role_name }}"
    region: "{{ plat__region }}"
  register: __aws_xaccount_role_info

- name: Print details of AWS cross account role
  debug:
    msg: 
    - Cross account role "{{ __aws_xaccount_role_info }}"

- name: Create CDP Cross Account Credential for AWS
  when: plat__xacccount_credential_name not in plat__cdp_credentials_list
  cloudera.cloud.env_cred:
    cloud: "{{ plat__infra_type }}"
    name: "{{ plat__xacccount_credential_name }}"
    role: "{{ __aws_xaccount_role_info.iam_roles[0].arn }}"
    state: present

# TODO: Need to figure out how to handle this with Terraform
# - name: Remove temporary directory for policy documents
#   ansible.builtin.file:
#     path: "{{ __aws_policy_tmpdir.path }}"
#     state: absent
