---

# Copyright 2023 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: List VPC Endpoints
  when: infra__aws_private_endpoints | bool
  community.aws.ec2_vpc_endpoint_info:
    region: "{{ infra__region }}"
    filters:
      vpc-id: "{{ infra__aws_vpc_id }}"
  register: __infra_vpc_existing_endpoints

- name: Discover AWS VPC dependencies for forced teardown
  when:
    - infra__force_teardown | bool
    - infra__aws_vpc_id | length > 1
  block:
    - name: Discover all AWS VPC Network Interfaces
      register: __infra_vpc_enis
      amazon.aws.ec2_eni_info:
        region: "{{ infra__region }}"
        filters: "{{ __filters | items2dict }}"
      vars:
        __filters:
          - key: "vpc-id"
            value: "{{ infra__aws_vpc_id }}"

    - name: Discover all AWS VPC EC2 instances
      register: __infra_vpc_ec2_instances
      community.aws.ec2_instance_info:
        region: "{{ infra__region }}"
        filters: "{{ __filters | items2dict }}"
      vars:
        __filters:
          - key: "vpc-id"
            value: "{{ infra__aws_vpc_id }}"

    - name: Update fact for discovered EC2 Compute inventory
      ansible.builtin.set_fact:
        infra__discovered_compute_inventory: "{{ infra__discovered_compute_inventory + __infra_vpc_ec2_instances.instances }}"

    - name: List AWS EKS clusters
      register: __infra_eks_cluster_list
      command: "aws eks list-clusters --region {{ infra__region }}"

    - name: Describe all AWS EKS clusters
      register: __infra_eks_cluster_details
      ansible.builtin.command: "aws eks describe-cluster --name {{ __infra_eks_cluster_item }} --region {{ infra__region }}"
      loop_control:
        loop_var: __infra_eks_cluster_item
      loop: "{{ __infra_eks_cluster_list.stdout | from_json | community.general.json_query('clusters') }}"

    - name: Filter AWS EKS clusters by AWS VPC
      ansible.builtin.set_fact:
        __infra_vpc_eks_cluster_names: "{{ __infra_vpc_eks_cluster_names | d([]) + [__infra_lookup_name] }}"
      when: __infra_lookup_vpc == infra__aws_vpc_id
      vars:
        __infra_lookup_vpc: "{{ __infra_eks_cluster_detail_item.stdout | from_json | community.general.json_query('cluster.resourcesVpcConfig.vpcId') }}"
        __infra_lookup_name: "{{ __infra_eks_cluster_detail_item.stdout | from_json | community.general.json_query('cluster.name') }}"
      loop: "{{ __infra_eks_cluster_details.results }}"
      loop_control:
        loop_var: __infra_eks_cluster_detail_item
        label: "{{ __infra_eks_cluster_detail_item.stdout | from_json | community.general.json_query('cluster.name') }}"

    - name: List all AWS Autoscaling Groups
      register: __infra_ec2_asg_list
      community.aws.ec2_asg_info:
        region: "{{ infra__region }}"

    - name: Discover all AWS VPC Subnets
      register: __infra_disc_subnets
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ infra__region }}"
        filters:
          vpc-id: "{{ infra__aws_vpc_id }}"

    - name: Set fact for discovered AWS VPC Subnets
      ansible.builtin.set_fact:
        __infra_disc_subnet_cidrs: "{{ __infra_disc_subnet_cidrs | default([]) | union([__subnet.cidr_block]) }}"
      loop: "{{ __infra_disc_subnets.subnets }}"
      loop_control:
        loop_var: __subnet
        label: "{{ __subnet.cidr_block }}"

    - name: Filter Autoscaling Groups by discovered AWS VPC Subnets
      when:
        - __infra_ec2_asg_list.results | length > 0
        - __infra_asg_filter_item.vpc_zone_identifier.split(",")[0] in __infra_vpc_subnet_ids
      ansible.builtin.set_fact:
        __infra_aws_asg_names: "{{ __infra_aws_asg_names | default([]) + [__infra_asg_filter_item.auto_scaling_group_name] }}"
      vars:
        __infra_vpc_subnet_ids: "{{ __infra_disc_subnets.subnets | map(attribute='id') | list | unique }}"
        __infra_vpc_sg_ids: "{{ __infra_disc_sgs.security_groups | map(attribute='group_id') | list | unique }}"
      loop: "{{ __infra_ec2_asg_list.results }}"
      loop_control:
        loop_var: __infra_asg_filter_item
        label: "{{ __infra_asg_filter_item.auto_scaling_group_name }}"

    - name: List all AWS Elastic Loadbalancers
      community.aws.elb_classic_lb_info:
        region: "{{ infra__region }}"
      register: __infra_ec2_elbs

    - name: Filter list of AWS Elastic Loadbalancers by AWS VPC
      ansible.builtin.set_fact:
        __infra_ec2_elb_names: "{{ __infra_ec2_elb_names | default([]) | union([__infra_ec2_elb_item]) }}"
      loop: "{{ __infra_ec2_elbs.elbs | selectattr('vpc_id', 'equalto', infra__aws_vpc_id) | map(attribute='load_balancer_name') | list }}"
      loop_control:
        loop_var: __infra_ec2_elb_item
        #label: "{{ __infra_ec2_elb_item.load_balancer_name }}"

    - name: List all AWS VPC NAT gatways
      community.aws.ec2_vpc_nat_gateway_info:
        region: "{{ infra__region }}"
        filters:
          vpc-id: "{{ infra__aws_vpc_id }}"
      register: __infra_aws_nat_gateways

    - name: List all AWS VPC Security Groups
      register:  __infra_aws_sgs
      amazon.aws.ec2_group_info:
        region: "{{ infra__region }}"
        filters:
          vpc-id: "{{ infra__aws_vpc_id }}"

    - name: List all AWS VPC Route tables
      register: __infra_aws_rtbs
      community.aws.ec2_vpc_route_table_info:
        region: "{{ infra__region }}"
        filters:
          vpc-id: "{{ infra__aws_vpc_id }}"

- name: Discover AWS RDS for forced teardown
  when: infra__force_teardown | bool
  block:
    - name: list AWS RDS Instances in region
      community.aws.rds_instance_info:
        region: "{{ infra__region }}"
      register: __infra_aws_rds_list

    - name: Filter RDS instances by AWS VPC
      ansible.builtin.set_fact:
        __infra_aws_rds_instances: "{{ __infra_aws_rds_list | json_query(__aws_rds_jq) }}"
      vars:
        __aws_rds_jq: "instances[?db_subnet_group.vpc_id == '{{ infra__aws_vpc_id }}']"

- name: Discover AWS Elastic Block Storage for forced teardown
  when: infra__force_teardown | bool
  block:
    - name: List AWS EBS Volumes
      register: __infra_aws_ebs_vols
      amazon.aws.ec2_vol_info:
        region: "{{ infra__region }}"
        filters:
          status: available

    - name: Check for orphaned AWS EFS matching Namespace
      register: __infra_efs_fs
      community.aws.efs_info:
        region: "{{ infra__region }}"
        tags: "{{ __tag | items2dict }}"
      vars:
        __tag:
          - key: "{{ __efs_disc_item }}"
            value: "{{ infra__env_name }}"
      loop:
        - Environment
        - clusterName
      loop_control:
        loop_var: __efs_disc_item