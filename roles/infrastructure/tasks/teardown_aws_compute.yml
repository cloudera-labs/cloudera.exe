---

# Copyright 2023 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Handle EC2 Autoscaling Groups removal if discovered
  when:
    - infra__force_teardown | bool
    - __infra_aws_asg_names is defined
    - __infra_aws_asg_names | length > 0
  community.aws.ec2_asg:
    name: "{{ __infra_asg_remove_item }}"
    state: absent
  loop: "{{ __infra_aws_asg_names }}"
  loop_control:
    loop_var: __infra_asg_remove_item

- name: Handle EKS Cluster removal if discovered
  when:
    - infra__force_teardown | bool
    - __infra_vpc_eks_cluster_names is defined
    - __infra_vpc_eks_cluster_names | length > 0
  community.aws.aws_eks_cluster:
    name: "{{ __infra_eks_remove_item }}"
    wait: yes
    state: absent
  loop: "{{ __infra_vpc_eks_cluster_names }}"
  loop_control:
    loop_var: __infra_eks_remove_item
  async: 3600 # 1 hour timeout
  poll: 0
  register: __eks_teardowns_info

- name: Ensure RDS Instance deletion protection is disabled if discovered
  when:
    - infra__force_teardown | bool
    - __infra_aws_rds_instances is defined
    - __infra_aws_rds_instances | length > 0
  command: >
    aws rds modify-db-instance
    --db-instance-identifier {{ __infra_rds_protect_item.db_instance_identifier }}
    --no-deletion-protection
  loop: "{{ __infra_aws_rds_instances }}"
  loop_control:
    loop_var: __infra_rds_protect_item

- name: Handle RDS Instance removal if discovered
  when:
    - infra__force_teardown | bool
    - __infra_aws_rds_instances is defined
    - __infra_aws_rds_instances | length > 0
  community.aws.rds_instance:
    command: delete
    region: "{{ infra__region }}"
    instance_name: "{{ __infra_rds_remove_item.db_instance_identifier }}"
    wait: yes
  loop: "{{ __infra_aws_rds_instances }}"
  loop_control:
    loop_var: __infra_rds_remove_item
    label: "{{ __infra_rds_remove_item.db_instance_identifier }}"
  async: 3600 # 1 hour timeout
  poll: 0
  register: __rds_teardowns_info

- name: Wait for RDS Instance teardowns to complete
  when:
    - __rds_teardowns_info is defined
    - __rds_teardowns_info.results is defined
    - __rds_teardowns_info.results | length > 0
  ansible.builtin.async_status:
    jid: "{{ __rds_teardown.ansible_job_id }}"
  loop_control:
    loop_var: __rds_teardown
    label: "{{ __rds_teardown['__infra_rds_remove_item']['db_instance_identifier'] }}"
  loop: "{{ __rds_teardowns_info.results }}"
  register: __rds_teardowns_async
  until: __rds_teardowns_async.finished
  retries: 3600
  delay: 10

- name: Wait for EKS teardowns to complete
  when:
    - __eks_teardowns_info is defined
    - __eks_teardowns_info.results is defined
    - __eks_teardowns_info.results | length > 0
  ansible.builtin.async_status:
    jid: "{{ __eks_teardown.ansible_job_id }}"
  loop_control:
    loop_var: __eks_teardown
  loop: "{{ __eks_teardowns_info.results }}"
  register: __eks_teardowns_async
  until: __eks_teardowns_async.finished
  retries: 360
  delay: 10

- name: Handle Compute Removal if Discovered
  when: infra__discovered_compute_inventory | count > 0
  amazon.aws.ec2_instance:
    region: "{{ infra__region }}"
    wait: yes
    state: absent
    instance_ids: "{{ infra__discovered_compute_inventory | community.general.json_query('[*].instance_id') | list | unique }}"