---

# Copyright 2023 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Set fact for Log and Data locations
  ansible.builtin.set_fact:
    infra__aws_storage_locations: "{{ infra__aws_storage_locations | default([]) | union([storage_location]) }}"
  vars:
    storage_location:
      bucket: "{{ __aws_storage_location_item.bucket }}"
      path: "{{ __aws_storage_location_item.path }}"
  loop_control:
    loop_var: __aws_storage_location_item
  loop:
    - bucket: "{{ infra__storage_name }}"
      path: "{{ infra__logs_path }}"
    - bucket: "{{ infra__storage_name }}"
      path: "{{ infra__ranger_audit_path }}"

# Will discover VPC ID as well
- name: Confirm existing AWS Public and Private Subnet details if provided
  when: infra__aws_private_subnet_ids or infra__aws_public_subnet_ids
  block:
    - name: Handle existing AWS Private Subnets
      when: infra__aws_private_subnet_ids
      block:
        - name: Fetch AWS private subnets info
          amazon.aws.ec2_vpc_subnet_info:
            region: "{{ infra__region }}"
            subnet_ids: "{{ infra__aws_private_subnet_ids }}"
          register: __aws_private_subnets_info

        - name: Confirm AWS private subnet AZ count and public IP assignment
          ansible.builtin.assert:
            that:
              - __aws_private_subnets_info.subnets | map(attribute='availability_zone') | list | unique | count >= infra__aws_vpc_az_count | int
              - __aws_private_subnets_info.subnets | map(attribute='map_public_ip_on_launch') | reject() | length > 0
            fail_msg: "The private subnets should be provided from at least 2 AZs and should have public IP addressing disabled."
            quiet: yes

        - name: Generate Private Subnet details for update
          ansible.builtin.set_fact:
            infra__vpc_private_subnets_info: "{{ infra__vpc_private_subnets_info | default([]) | union([entry]) }}"
          loop_control:
            loop_var: __private_subnet_item
            index_var: __private_subnet_idx
          loop: "{{ __aws_private_subnets_info.subnets }}"
          vars:
            entry:
              name: "{{ __private_subnet_item.tags['Name'] | default([infra__namespace, infra__vpc_private_subnets_suffix, __private_subnet_idx|string] | join('-')) }}"
              cidr: "{{ __private_subnet_item.cidr_block }}"
              tags:
                "kubernetes.io/role/internal-elb": "1"
                "Name": "{{ __private_subnet_item.tags['Name'] | default([infra__namespace, infra__vpc_private_subnets_suffix, __private_subnet_idx|string] | join('-')) }}"

        - name: Set facts for existing AWS Private Subnet IDs and associate VPC ID
          ansible.builtin.set_fact:
            infra__aws_subnet_ids: "{{ infra__aws_private_subnet_ids }}"
            infra__aws_vpc_id: "{{ __aws_private_subnets_info.subnets | map(attribute='vpc_id') | list | first }}"

    - name: Handle existing AWS Public Subnets
      when: infra__aws_public_subnet_ids
      block:
        - name: Fetch AWS Public Subnets info
          amazon.aws.ec2_vpc_subnet_info:
            region: "{{ infra__region }}"
            subnet_ids: "{{ infra__aws_public_subnet_ids }}"
          register: __aws_public_subnets_info

        - name: Confirm AWS Public Subnet AZ count and public IP assignment
          ansible.builtin.assert:
            that:
              - __aws_public_subnets_info.subnets | map(attribute='availability_zone') | list | unique | count >= infra__aws_vpc_az_count | int
              - __aws_public_subnets_info.subnets | map(attribute='map_public_ip_on_launch') | select() | length > 0
            fail_msg: "The public subnets should be associated with at least 2 AZs and should have public IP addressing enabled."
            quiet: yes

        - name: Confirm additional AWS Public Subnet AZ count if providing Public Endpoint access
          when: infra__public_endpoint_access
          ansible.builtin.assert:
            that:
              - infra__aws_private_subnet_ids
              - infra__aws_public_subnet_ids | unique | count >= __aws_private_subnets_info.subnets | map(attribute='availability_zone') | list | unique | count
            fail_msg: "The number of public subnets should be at least as many as the number of associated AZs of the private subnets."
            quiet: yes

        - name: Generate Public Subnet details for update
          ansible.builtin.set_fact:
            infra__vpc_public_subnets_info: "{{ infra__vpc_public_subnets_info | default([]) | union([entry]) }}"
          loop_control:
            loop_var: __public_subnet_item
            index_var: __public_subnet_idx
          loop: "{{ __aws_public_subnets_info.subnets }}"
          vars:
            entry:
              name: "{{ __public_subnet_item.tags['Name'] | default([infra__namespace, infra__vpc_public_subnets_suffix, __public_subnet_idx|string] | join('-')) }}"
              cidr: "{{ __public_subnet_item.cidr_block }}"
              map_public: "{{ __public_subnet_item.map_public_ip_on_launch }}"
              assign_instances_ipv6: "{{ __public_subnet_item.assign_ipv6_address_on_creation }}"
              tags:
                "kubernetes.io/role/elb": "1"
                "Name": "{{ __public_subnet_item.tags['Name'] | default([infra__namespace, infra__vpc_public_subnets_suffix, __public_subnet_idx|string] | join('-')) }}"

        - name: Set facts for existing AWS Public Subnet IDs
          ansible.builtin.set_fact:
            infra__aws_subnet_ids: "{{ infra__aws_subnet_ids | default([]) | union(infra__aws_public_subnet_ids) }}"
            infra__aws_vpc_id: "{{ __aws_public_subnets_info.subnets | map(attribute='vpc_id') | list | first }}"

    - name: Confirm facts for AWS Subnets
      ansible.builtin.set_fact:
        infra__vpc_private_subnets_info: "{{ infra__vpc_private_subnets_info | default([]) }}"
        infra__vpc_public_subnets_info: "{{ infra__vpc_public_subnets_info | default([]) }}"

- name: Query existing AWS VPC if provided
  when: infra__aws_vpc_id != ""
  block:
    # Using CLI due to hardcoded module behavior - see https://github.com/boto/boto3/issues/2929
    - name: Confirm AWS VPC ID (CLI version)
      ansible.builtin.command: "aws ec2 describe-vpcs --region {{ infra__region }} --vpc-id {{ infra__aws_vpc_id }}"
      register: __aws_vpc_list
      failed_when: not (__aws_vpc_list.stdout | from_json)['Vpcs']

    - name: Set facts for existing AWS VPC CIDR block (CLI version)
      when: (__aws_vpc_list.stdout | from_json)['Vpcs'] | count > 0
      ansible.builtin.set_fact:
        infra__vpc_cidr: "{{ (__aws_vpc_list.stdout | from_json)['Vpcs'][0]['CidrBlock'] }}"

- name: Discover possible existing AWS VPC details
  when: infra__aws_vpc_id == ""
  block:
    # Using CLI due to hardcoded module behavior - see https://github.com/boto/boto3/issues/2929
    - name: Query AWS VPC ID by unique name and CIDR (CLI version)
      ansible.builtin.command: "aws ec2 describe-vpcs --region {{ infra__region }} --filters Name=cidr,Values={{ infra__vpc_cidr }} Name=tag:Name,Values={{ infra__vpc_name }}"
      register: __aws_vpc_list_discovered

    - name: Check VPC list for singular response (CLI version)
      when: (__aws_vpc_list_discovered.stdout | from_json)['Vpcs'] | count > 1
      ansible.builtin.fail:
        msg: "Found more than one VPC matching name, {{ infra__vpc_name }}, and CIDR, {{ infra__vpc_cidr }}."

    - name: Set fact for AWS VPC ID parameter on a unique response (CLI version)
      when: (__aws_vpc_list_discovered.stdout | from_json)['Vpcs'] | count == 1
      ansible.builtin.set_fact:
        infra__aws_vpc_id: "{{ (__aws_vpc_list_discovered.stdout | from_json)['Vpcs'] | map(attribute='VpcId') | list | first }}"

- name: Fetch EC2 Instance info for Dynamic Inventory Nodes
  register: __infra_dynamic_inventory_discovered
  community.aws.ec2_instance_info:
    region: "{{ infra__region }}"
    filters: "{{ __filters | items2dict }}"
  vars:
    __filters:
      - key: "tag:{{ infra__dynamic_inventory_tag_key }}"
        value: "{{ infra__dynamic_inventory_tag_value }}*"

- name: Fetch EC2 Instance info for Utility VM
  register: __infra_utility_compute_discovered
  community.aws.ec2_instance_info:
    region: "{{ infra__region }}"
    filters: "{{ __filters | items2dict }}"
  vars:
    __filters:
      - key: "tag:Name"
        value: "{{ infra__namespace }}*"

- name: Set fact for discovered EC2 Compute inventory
  ansible.builtin.set_fact:
    infra__discovered_compute_inventory: "{{ __infra_dynamic_inventory_discovered.instances + __infra_utility_compute_discovered.instances }}"


