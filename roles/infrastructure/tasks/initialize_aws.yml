---

# Copyright 2021 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Set fact for Log and Data locations
  ansible.builtin.set_fact:
    infra__aws_storage_locations: "{{ infra__aws_storage_locations | default([]) | union([storage_location]) }}"
  vars:
    storage_location:
      bucket: "{{ __aws_storage_location_item.bucket }}"
      path: "{{ __aws_storage_location_item.path }}"
  loop_control:
    loop_var: __aws_storage_location_item
  loop:
    - bucket: "{{ infra__storage_name }}"
      path: "{{ infra__logs_path }}"
    - bucket: "{{ infra__storage_name }}"
      path: "{{ infra__ranger_audit_path }}"

- name: Fetch the AWS VPC id
  when: infra__aws_vpc_id == ""
  block:
    - name: Query AWS VPCs by unique name and CIDR
      amazon.aws.ec2_vpc_net_info:
        region: "{{ infra__region }}"
        filters:
          "tag:Name": "{{ infra__vpc_name }}*"
          cidr: "{{ infra__vpc_cidr }}"
      register: __aws_vpc_list

    - name: Check VPC list for singular response
      when: __aws_vpc_list.vpcs | count > 1
      ansible.builtin.fail:
        msg: "Found more than one VPC matching name and CIDR"

    - name: Set fact for AWS VPC ID parameter on a unique response
      when: __aws_vpc_list.vpcs | count == 1
      ansible.builtin.set_fact:
        infra__aws_vpc_id: "{{ __aws_vpc_list.vpcs[0].vpc_id }}"

    - name: Reset and set fact for AWS VPC ID if none found
      when: __aws_vpc_list.vpcs | count < 1
      ansible.builtin.set_fact:
        infra__aws_vpc_id: ""

- name: Fetch EC2 Instance info for Dynamic Inventory Nodes
  register: __infra_dynamic_inventory_discovered
  community.aws.ec2_instance_info:
    region: "{{ infra__region }}"
    filters: "{{ __filters | items2dict }}"
  vars:
    __filters:
      - key: "tag:{{ infra__dynamic_inventory_tag_key }}"
        value: "{{ infra__dynamic_inventory_tag_value }}*"

- name: Fetch EC2 Instance info for Utility VM
  register: __infra_utility_compute_discovered
  community.aws.ec2_instance_info:
    region: "{{ infra__region }}"
    filters: "{{ __filters | items2dict }}"
  vars:
    __filters:
      - key: "tag:Name"
        value: "{{ infra__namespace }}*"

- name: Set discovered compute inventory for later action
  ansible.builtin.set_fact:
    infra__discovered_compute_inventory: "{{ __infra_dynamic_inventory_discovered.instances + __infra_utility_compute_discovered.instances }}"

# Note that the download mirror is localised to the Account and Region deliberately
- name: Determine Download Mirror Bucket Name
  when:
    - not infra__utlity_bucket_name
    - infra__create_utility_service | bool
  ansible.builtin.set_fact:
    infra__utlity_bucket_name: "{{ [ infra__download_mirror_bucket_prefix, infra__aws_caller_info.account, infra__region ] | join('-') }}"

# These need to be set as facts on the Ansible Controller to be picked up later
- name: Set Download Mirror output artefacts
  ansible.builtin.set_fact:
    infra__type: "{{ infra__type }}"
    infra__region: "{{ infra__region }}"