---

# Copyright 2021 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# When infra__aws_subnet_ids is True, then only delete SGs, because the network is not "owned"
# Otherwise, delete it all unless told otherwise
# Note that if the VPC is not shared, but is supplied via direct VpcId or discovered via Name/CIDR, the role will attempt to destroy it

- name: Tear down AWS Security Groups
  when: infra__teardown_deletes_network and infra__aws_vpc_id
  amazon.aws.ec2_group:
    region: "{{ infra__region }}"
    vpc_id: "{{ infra__aws_vpc_id }}"
    name: "{{ __security_group_name_item }}"
    state: absent
  loop_control:
    loop_var: __security_group_name_item
  loop:
    - "{{ infra__security_group_knox_name }}"
    - "{{ infra__security_group_default_name }}"

- name: Tear down AWS Network
  when: infra__teardown_deletes_network and infra__aws_vpc_id and not infra__aws_subnet_ids
  block:
    - name: Remove Elastic Load Balancers, if Discovered
      when:
        - __infra_ec2_elb_names is defined
        - __infra_ec2_elb_names | length > 0
        - infra__force_teardown | bool
      loop: "{{ __infra_ec2_elb_names }}"
      loop_control:
        loop_var: __infra_elb_remove_item
      amazon.aws.ec2_elb_lb:
        name: "{{ __infra_elb_remove_item }}"
        state: absent
        wait: yes
      async: 3600 # 1 hour timeout
      poll: 0
      register: __elb_teardowns_info

    - name: Wait for ELB teardowns to complete
      when:
        - __elb_teardowns_info is defined
        - __elb_teardowns_info.results is defined
        - __elb_teardowns_info.results | length > 0
      ansible.builtin.async_status:
        jid: "{{ __elb_teardown.ansible_job_id }}"
      loop_control:
        loop_var: __elb_teardown
      loop: "{{ __elb_teardowns_info.results }}"
      register: __elb_teardowns_async
      until: __elb_teardowns_async.finished
      retries: 120
      delay: 10

    - name: Remove the AWS Private Network
      when: infra__tunnel
      block:
        - name: Delete the AWS Private Route Tables
          community.aws.ec2_vpc_route_table:
            vpc_id: "{{ infra__aws_vpc_id }}"
            region: "{{ infra__region }}"
            lookup: tag
            tags: "{{ { 'Name': '-'.join([infra__aws_private_route_table_name, __aws_private_subnet_id_index | string])} }}"
            state: absent
          loop_control:
            index_var: __aws_private_subnet_id_index
          loop: "{{ infra__vpc_private_subnet_cidrs }}"

        - name: List all managed AWS NAT Gateways
          community.aws.ec2_vpc_nat_gateway_info:
            region: "{{ infra__region }}"
            filters:
              vpc-id: "{{ infra__aws_vpc_id }}"
          register: __aws_all_ngws

        - name: Delete associated AWS NAT Gateways
          community.aws.ec2_vpc_nat_gateway:
            state: absent
            region: "{{ infra__region }}"
            wait: true
            nat_gateway_id: "{{ item.nat_gateway_id }}"
            release_eip: true
          register: __aws_ngw_teardown
          loop_control:
            label: "{{ item.nat_gateway_id }}"
          loop: "{{ __aws_all_ngws.result }}"
          ignore_errors: true

        - name: Check if AWS NAT Gateways deleted succesfully
          when: __aws_ngw_teardown is defined and __aws_ngw_teardown.results is defined and __aws_ngw_teardown.results | count > 0
          ansible.builtin.fail:
            msg: "Failed to delete a NAT gateway"
          failed_when: item.rc is defined and item.rc != 1 and ('InvalidAllocationID.NotFound' in item.module_stderr)
          loop: "{{ __aws_ngw_teardown.results }}"

    - name: Remove Network Adapters, if exists
      when:
        - __infra_vpc_enis is defined
        - __infra_vpc_enis.network_interfaces is defined
        - __infra_vpc_enis.network_interfaces | length > 0
        - infra__force_teardown | bool
      amazon.aws.ec2_eni:
        eni_id: "{{ __eni_adapter.id }}"
        state: absent
      loop_control:
        loop_var: __eni_adapter
      loop: "{{ __infra_vpc_enis.network_interfaces }}"

    - name: Remove Expected Security Groups
      amazon.aws.ec2_group:
        region: "{{ infra__region }}"
        vpc_id: "{{ infra__aws_vpc_id }}"
        name: "{{ __security_group_name_item }}"
        state: absent
      loop_control:
        loop_var: __security_group_name_item
      loop:
        - "{{ infra__security_group_knox_name }}"
        - "{{ infra__security_group_default_name }}"

    - name: Handle Security Groups during Purge
      when:
        - __infra_aws_sgs is defined
        - __infra_aws_sgs.security_groups is defined
        - __infra_aws_sgs.security_groups | length > 0
        - infra__force_teardown | bool
      block:
        - name: Clean Security Group rules during Purge
          when: __security_group_rule_item.group_name != 'default'
          amazon.aws.ec2_group:
            region: "{{ infra__region }}"
            vpc_id: "{{ infra__aws_vpc_id }}"
            name: "{{ __security_group_rule_item.group_name }}"
            description: "{{ __security_group_rule_item.description }}"
            state: present
            rules: []
            rules_egress: []
          loop_control:
            loop_var: __security_group_rule_item
            label: "{{ __security_group_rule_item.group_name }}"
          loop: "{{ __infra_aws_sgs.security_groups }}"

        - name: Remove Security groups during Purge
          when: __security_group_purge_item.group_name != 'default'
          amazon.aws.ec2_group:
            region: "{{ infra__region }}"
            vpc_id: "{{ infra__aws_vpc_id }}"
            name: "{{ __security_group_purge_item.group_name }}"
            state: absent
          loop_control:
            loop_var: __security_group_purge_item
            label: "{{ __security_group_purge_item.group_name }}"
          loop: "{{ __infra_aws_sgs.security_groups }}"

    - name: Remove any NAT Gateways Discovered during Purge
      register: __infra_aws_nat_remove_result
      when:
        - __infra_aws_nat_gateways is defined
        - __infra_aws_nat_gateways.result is defined
        - __infra_aws_nat_gateways.result | length > 0
        - infra__force_teardown | bool
      community.aws.ec2_vpc_nat_gateway:
        state: absent
        region: "{{ infra__region }}"
        wait: true
        nat_gateway_id: "{{ __infra_nat_gateway_remove_item.nat_gateway_id }}"
        release_eip: true
      loop_control:
        label: "{{ __infra_nat_gateway_remove_item.nat_gateway_id }}"
        loop_var: __infra_nat_gateway_remove_item
      loop: "{{ __infra_aws_nat_gateways.result }}"
      failed_when: __infra_aws_nat_remove_result.rc != 0 and 'InvalidAllocationID.NotFound' not in __infra_aws_nat_remove_result.module_stderr

    - name: Remove all AWS VPC Subnets
      amazon.aws.ec2_vpc_subnet:
        region: "{{ infra__region }}"
        vpc_id: "{{ infra__aws_vpc_id }}"
        cidr: "{{ __aws_subnet_item }}"
        state: absent
      loop_control:
        loop_var: __aws_subnet_item
        index_var: __aws_subnet_index
      loop: "{{ infra__vpc_public_subnet_cidrs | union(infra__vpc_private_subnet_cidrs) }}"

    - name: Remove AWS Internet Gateway (IGW)
      community.aws.ec2_vpc_igw:
        region: "{{ infra__region }}"
        vpc_id: "{{ infra__aws_vpc_id }}"
        state: absent
        tags:
          Name: "{{ infra__aws_igw_name }}"

    - name: Remove Route Tables
      when:
        - __infra_aws_rtbs is defined
        - __infra_aws_rtbs.route_tables is defined
        - __infra_aws_rtbs.route_tables | length > 0
        - infra__force_teardown | bool
        - __infra_aws_rtb_item.associations | selectattr('main', 'equalto', True) | length == 0
      loop: "{{ __infra_aws_rtbs.route_tables }}"
      loop_control:
        loop_var: __infra_aws_rtb_item
        label: "{{ __infra_aws_rtb_item.id }}"
      community.aws.ec2_vpc_route_table:
        vpc_id: "{{ infra__aws_vpc_id }}"
        region: "{{ infra__region }}"
        route_table_id: "{{ __infra_aws_rtb_item.id }}"
        lookup: id
        state: absent

    - name: Remove AWS VPC
      amazon.aws.ec2_vpc_net:
        region: "{{ infra__region }}"
        name: "{{ infra__vpc_name }}"
        cidr_block: "{{ infra__vpc_cidr }}"
        state: absent