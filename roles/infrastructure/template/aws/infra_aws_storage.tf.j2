# ------- S3 Buckets -------
# Get unique list of buckets from infra__aws_storage_locations
{% for __aws_storage_location_item in ( infra__aws_storage_locations | map(attribute='bucket') | list | unique ) %}
resource "aws_s3_bucket" "{{ __aws_storage_location_item }}" {
  bucket        = "{{ __aws_storage_location_item }}"

{% if infra__teardown_deletes_data %}
  force_destroy = true
{% else %}
  {# TODO: How to skip teardown of this resource if infra__teardown_deletes_data is False #}
  lifecycle {
    # A Terraform destroy of this resource will result in an error message.
    prevent_destroy = true
  }
{% endif %}

  tags          = merge(var.env_tags,{Name = "{{ __aws_storage_location_item }}"})
}

# Separate bucket acl resource definition
resource "aws_s3_bucket_acl" "{{ __aws_storage_location_item }}" {
  bucket = aws_s3_bucket.{{ __aws_storage_location_item }}.id
  acl    = "private"
}
{% endfor %}

# ------- AWS Buckets directory structures -------
{% for __aws_storage_object_item in infra__aws_storage_locations %}
{# Terraform resources cannot have '/' so replace with '_' #}
{% set __aws_storage_object_resource = __aws_storage_object_item.path |replace("/", "_") %}

resource "aws_s3_object" "{{ __aws_storage_object_resource }}" {
    bucket        = aws_s3_bucket.{{ __aws_storage_object_item.bucket }}.id
    key           = "{{ __aws_storage_object_item.path }}/"
    # Below may not be required once we have the '/'
    content_type  = "application/x-directory"
}
{% endfor %}

# ------- Download Mirror Bucket -------
# TODO: Don't fail if Mirror Bucket already exists from non-Terraform code.
# resource "aws_s3_bucket" "{{ infra__utlity_bucket_name }}" {
#   bucket = "{{ infra__utlity_bucket_name }}"
#   acl    = "private"
#   force_destroy = true

#   tags = merge(var.env_tags,{Name = "{{ infra__utlity_bucket_name }}"})
# }

