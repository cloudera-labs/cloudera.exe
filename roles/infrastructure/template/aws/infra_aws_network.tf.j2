# ------- VPC -------
# Create the VPC's
resource "aws_vpc" "{{ infra__vpc_name }}" {
  cidr_block           = "{{ infra__vpc_cidr }}"
  tags = merge(var.env_tags,{Name = "{{ infra__vpc_name }}"})

  instance_tenancy     = "default"
  enable_dns_support   = true
  enable_dns_hostnames = true
}

{# *** START Create AWS Public Network infrastructure  ****#}
{% if infra__aws_subnet_ids is not defined %}
# ------- AWS Public Network infrastructure -------
# Internet Gateway
resource "aws_internet_gateway" "{{ infra__aws_igw_name }}" {
  vpc_id = aws_vpc.{{ infra__vpc_name }}.id
  tags   = merge(var.env_tags,{Name = "{{ infra__aws_igw_name }}"})
}

# AWS VPC Public Subnets 
{% for __aws_public_subnet_item in infra__vpc_public_subnets_info %}
resource "aws_subnet" "{{ __aws_public_subnet_item.name }}" {
    vpc_id                  = aws_vpc.{{ infra__vpc_name }}.id
    cidr_block              = "{{ __aws_public_subnet_item.cidr }}"
    map_public_ip_on_launch = true
    availability_zone       = "{{ __aws_az_info.availability_zones[loop.index0 % infra__aws_vpc_az_count | int].zone_name }}"
    tags                    = merge(var.env_tags,{% for key, value in __aws_public_subnet_item.tags.items() %}{ "{{ key }}" = "{{ value }}" },{% endfor %})
}
{% endfor %}

# Public Route Table
resource "aws_default_route_table" "{{ infra__aws_public_route_table_name }}" {
  default_route_table_id = aws_vpc.{{ infra__vpc_name }}.default_route_table_id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.{{ infra__aws_igw_name }}.id
  }

  tags                   = merge(var.env_tags,{Name = "{{ infra__aws_public_route_table_name }}"})

}

# Associate the Public Route Table with the Public Subnets
{% for __aws_public_subnet_item in infra__vpc_public_subnets_info %}
resource "aws_route_table_association" "{{ __aws_public_subnet_item.name }}-association" {
   subnet_id      = aws_subnet.{{ __aws_public_subnet_item.name }}.id
   route_table_id = aws_vpc.{{ infra__vpc_name }}.default_route_table_id
}
{% endfor %}

{% endif %}
{# *** END Create AWS Public Network infrastructure  ****#}


{# *** START Create AWS Private Network infrastructure  ****#}
{% if ( infra__tunnel ) and ( infra__aws_subnet_ids is not defined ) %}

# ------- AWS Private Networking infrastructure -------

# AWS VPC Private Subnets
{% for __aws_private_subnet_item in infra__vpc_private_subnets_info %}
resource "aws_subnet" "{{ __aws_private_subnet_item.name }}" {
    vpc_id                  = aws_vpc.{{ infra__vpc_name }}.id
    cidr_block              = "{{ __aws_private_subnet_item.cidr }}"
    map_public_ip_on_launch = false
    availability_zone       = "{{ __aws_az_info.availability_zones[loop.index0 % infra__aws_vpc_az_count | int].zone_name }}"
    tags                    = merge(var.env_tags,{% for key, value in __aws_private_subnet_item.tags.items() %}{ "{{ key }}" = "{{ value }}" },{% endfor %})
}
{% endfor %}

# Private Route Table for the AWS VPC
#  - Not implemeted in Terraform because of "when: no" in Ansible

# Elastic IP for each NAT gateway
{% for __aws_public_subnet_item in infra__vpc_public_subnets_info %}
resource "aws_eip" "{{ infra__aws_nat_gateway_name }}-eip-{{ loop.index0 }}" {
  vpc  = true

  tags = var.env_tags
}
{% endfor %}

#  Network Gateways (NAT)
{% for __aws_public_subnet_item in infra__vpc_public_subnets_info %}
resource "aws_nat_gateway" "{{ infra__aws_nat_gateway_name }}-{{ loop.index0 }}" {

  subnet_id         = aws_subnet.{{ __aws_public_subnet_item.name }}.id
  allocation_id     = aws_eip.{{ infra__aws_nat_gateway_name }}-eip-{{ loop.index0 }}.id
  connectivity_type = "public"

  tags              = merge(var.env_tags,{Name = "{{ '-'.join([infra__aws_nat_gateway_name, loop.index0 | string ]) }}"})
}
{% endfor %}

# Private Route Tables
{% for __aws_private_subnet_item in infra__vpc_private_subnets_info %}
resource "aws_route_table" "{{ infra__aws_private_route_table_name }}-{{ loop.index0 }}" {
    vpc_id = aws_vpc.{{ infra__vpc_name }}.id
    
    tags   = merge(var.env_tags,{Name = "{{ '-'.join([infra__aws_private_route_table_name, loop.index0 | string ]) }}"})
    
  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.{{ infra__aws_nat_gateway_name }}-{{ loop.index0 % infra__vpc_public_subnets_info | length }}.id
  }

}
{% endfor %}

# Associate the Private Route Tables with the Private Subnets
{% for __aws_private_subnet_item in infra__vpc_private_subnets_info %}
resource "aws_route_table_association" "{{ infra__aws_private_route_table_name }}-{{ loop.index0 }}-association" {
   subnet_id      = aws_subnet.{{ __aws_private_subnet_item.name }}.id
   route_table_id = aws_route_table.{{ infra__aws_private_route_table_name }}-{{ loop.index0 }}.id
}
{% endfor %}

{% endif %}
{# *** END Create AWS PRIVATE Network infrastructure  ****#}

# ------- Security Groups -------
{% set __security_group_names = [infra__security_group_knox_name, infra__security_group_default_name] %}

{% for __security_group_name_item in __security_group_names %}
resource "aws_security_group" "{{ __security_group_name_item }}" {
  vpc_id       = aws_vpc.{{ infra__vpc_name }}.id
  name         = "{{ __security_group_name_item }}"
  description  = "{{ __security_group_name_item }}"

  tags         = merge(var.env_tags,{Name = "{{ __security_group_name_item }}"})

  # Create self reference ingress rule to allow 
  # communication among resources in the security group.
  ingress {
      from_port = 0
      to_port   = 0
      protocol  = "all"
      self      = true
  }

{# ******* NOTE: HANDLING OF SECURITY GROUP RULES *******#}
{# Need to loop over each security group rule:#}
{# Need to Process & Translate *CIDR Block* according to following rules:#}
{#         * Can be empty in which case remove entry - DONE#}
{#         * Can be a string. Check if this works; if not cast to list element#}
{#         * Can be a list. Use directly - DONE #}

{# Need to Process & Translate *Ports* according to following rules: #}
{#         * If proto is `all` (or -1) then ports are 0 - DONE#}
{#         * If toPort and fromPort specified use those#}
{#         * ports: can be a range. Split and select - DONE#}
{#         * ports: could be a list. Loop over each - DONE #}
{#         * If no ports, toPort and fromPort then use default of full range (0)#}

{# **Loop over security group rule**#}
{% for ingress in infra__aws_security_group_rules %}
# ----- Raw Inputs -----
# ports       = {{ ingress.ports|pprint }}
# cidr_blocks = {{ ingress.cidr_ip }}
# protocol    = {{ ingress.proto }}
# ----------------------
{# **Process CIDR Block**#}
{# 1. CIDR block can be empty, in which case remove entry#}
{% if ingress.cidr_ip | length > 0 %}
{# 1a. If CIDR is a single string value then we need to convert single item list #}
{#     to_json is used to convert single quotes around IP to double #}
{% if ingress.cidr_ip is string %}
{% set cidr_ingress = 'cidr_blocks = ' + [ingress.cidr_ip]| to_json | string %}
{% else %}
{# 1b. If CIDR is a list to convert single quotes to double (to_json) and stringify #}
{% set cidr_ingress = 'cidr_blocks = ' + ingress.cidr_ip| to_json | string %}
{% endif %}
{% else %}
{# 1c. If CIDR is empty we remove the entry #}
{% set cidr_ingress = '' %}
{% endif %} 
{# **Process Ports**#}
{# 1. If proto is 'all' or -1 #}
{% if ingress.proto in ['all', -1]  or ingress.ports is not defined %}
{# 1a. to and from ports are 0 #}
{% set toPort = 0 %}
{% set fromPort = 0 %}
{# 1b. Print out ingress #}
  ingress {
    {{ cidr_ingress }}
    from_port   = "{{ toPort }}"
    to_port     = "{{ fromPort }}"
    protocol    = "{{ ingress.proto }}"
  }
{# 2. Ports can be a String (either a single value or a range)#}
{% elif ingress.ports is string %}
{# 2a. Attempt to split the string at '-' to create a list#}
{% set portList = ingress.ports.split('-') %}
{# 2b. In the list toPort is the first element#}
{% set toPort = portList[0] %}
{# 2c. Value of fromPort depends on length of the split string.#}
{% if portList|length > 1 %}
{# ...it's the second element if a range is given (i.e. length > 1)#}
{% set fromPort = portList[1] %}
{% else %}
{# ...it's also the first element if a single value is given#}
{% set fromPort = portList[0] %}
{% endif %}
{# 2d. Print the ingress block#}
  ingress {
    {{ cidr_ingress }}
    from_port   = "{{ toPort }}"
    to_port     = "{{ fromPort }}"
    protocol    = "{{ ingress.proto }}"
  }
{# 3. Ports can be a List of individual ports which we need to loop over#}
{% elif ingress.ports is iterable and (ingress.ports is not string and ingress.ports is not mapping) %}
{# 3a. Loop over each port separately and print ingress #}
{% for port in ingress.ports %}
  ingress {
    {{ cidr_ingress }}
    from_port   = "{{ port }}"
    to_port     = "{{ port }}"
    protocol    = "{{ ingress.proto }}"
  }
{% endfor %}
{% endif %}
{% endfor %}

  # Terraform removes the default ALLOW ALL egress. Let's recreate this
  egress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port   = 0
    to_port     = 0
    protocol    = "all"
  }

}
{% endfor %}
