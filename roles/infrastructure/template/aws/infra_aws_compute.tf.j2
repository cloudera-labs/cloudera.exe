{# *** Set the __aws_subnets to use for the aws_instance subnet_id parameter ****#}
{% if not infra__tunnel %}
{% set __aws_subnets = (__aws_subnets | default([])) | union(infra__vpc_public_subnets_info) %}
{% endif %}

{% if ( infra__tunnel ) and ( infra__aws_subnet_ids is not defined ) %}
{% set __aws_subnets = (__aws_subnets | default([])) | union(infra__vpc_public_subnets_info)  | union(infra__vpc_private_subnets_info)%}
{% endif %}

# ------- Dynamic Inventory VMs -------
{% for __infra_compute_instance_item in range(0, infra__dynamic_inventory_count | int ) | list %}
resource "aws_instance" "{{ '-'.join([infra__namespace, infra__dynamic_inventory_vm_suffix, '%02d' | format(__infra_compute_instance_item)]) }}" {
  vpc_security_group_ids      = [aws_security_group.{{ infra__security_group_default_name }}.id]
  key_name                    = "{{ infra__public_key_id }}"
  instance_type               = "{{ infra__dynamic_inventory_vm_type_default[infra__type][infra__dynamic_inventory_vm_type] }}"
  ami                         = "{{ __infra_aws_ami_info.image_id }}"
  ebs_optimized               = true

  # Volume / root_block_device
  root_block_device {
    # Need to cast from string (yes) to bool
    delete_on_termination  = {{ infra__dynamic_inventory_delete_storage | bool | lower }}
    volume_size            = "{{ infra__dynamic_inventory_storage_size }}"
    volume_type            = "{{ infra__dynamic_inventory_storage_type_default[infra__type][infra__dynamic_inventory_storage_type] }}"
  }

  subnet_id                   = aws_subnet.{{ __aws_subnets | map(attribute='name') | first }}.id
 
  associate_public_ip_address = true

  {# to_json is used to convert single quotes around IP to double #}
  tags                        = merge({{ infra__dynamic_inventory_tags  | to_json }},{Name = "{{ '-'.join([infra__namespace, infra__dynamic_inventory_vm_suffix, infra__dynamic_inventory_os[::2], '%02d' | format(__infra_compute_instance_item)]) }}"}) 

}
{% endfor %}

{% if infra__create_utility_service %}
# ------- Localised Utility VM Instance -------
resource "aws_instance" "{{ '-'.join([infra__namespace, infra__region, 'utility_vm' ]) }}" {
  vpc_security_group_ids      = [aws_security_group.{{ infra__security_group_default_name }}.id]
  key_name                    = "{{ infra__public_key_id }}"
  instance_type               = "{{ infra__dynamic_inventory_vm_type_default[infra__type]['sml'] }}"
  ami                         = "{{ __infra_aws_ami_info.image_id }}"
  ebs_optimized               = true

  # Volume / root_block_device
  root_block_device {
    # Need to cast from string (yes) to bool
    delete_on_termination  = {{ infra__dynamic_inventory_delete_storage | bool | lower }}
    volume_size            = 100
    volume_type            = "{{ infra__dynamic_inventory_storage_type_default[infra__type]['std'] }}"
  }

  subnet_id                   = aws_subnet.{{ __aws_subnets | map(attribute='name') | first }}.id  

  associate_public_ip_address = true

  {# to_json is used to convert single quotes around IP to double #}
  tags                        = merge({{ infra__dynamic_inventory_tags  | to_json }},{Name = "{{ '-'.join([infra__namespace, infra_region, 'utility_vm' ]) }}"}) 
}

{% endif %}