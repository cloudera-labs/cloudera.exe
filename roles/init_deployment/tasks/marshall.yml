---

# Copyright 2023 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Check path
- name: Check a Definition path has been supplied
  ansible.builtin.assert:
    quiet: yes
    that:
      - definition_path is defined
      - definition_path | length > 0
    fail_msg: "You must supply a 'definition_path' pointing to your artefacts directory"

- name: Check if Definition Path '{{ definition_path }}' exists
  ansible.builtin.stat:
    path: "{{ definition_path }}"
  register: __definition_path_stat

- name: Assert Definition Path is a directory
  ansible.builtin.assert:
    quiet: yes
    fail_msg: "'definition_path' does not appear to point to an existing and reachable directory'"
    that:
      - __definition_path_stat.stat.isdir is defined
      - __definition_path_stat.stat.isdir

# Set File Paths
- name: Set Expected File Paths
  ansible.builtin.set_fact:
    init__definition_file: "{{ abs_definition | default( [definition_path, definition_file | default(default_definition_file)] | path_join ) }}"
    init__cluster_file: "{{ abs_cluster | default( [definition_path, cluster_file | default(default_cluster_file)] | path_join ) }}"
    init__auto_repo_mirror_artefact: "{{ auto_repo_mirror_file | default(auto_repo_mirror_file) }}"

# Handle Definition File
- name: Seek Definition files in Definition Path
  register: __def_file_stat
  ansible.builtin.stat:
    path: "{{ init__definition_file }}"

- name: Assert that a Definition File has been provided
  ansible.builtin.assert:
    quiet: yes
    that: __def_file_stat.stat.exists
    fail_msg: "Expected to find a definition file '{{ init__definition_file }}' in Definition Path '{{ definition_path }}'"

# User Definition files may contain lazy templating which would break if pre-merged here, therefore the cluster defaults file is kept separate
- name: Select default provided User Definition Files
  ansible.builtin.set_fact:
    init__user_definition_file: "{{ __def_file_stat.stat.path }}"
    init__cluster_definition_file: "{{ __def_file_stat.stat.path }}"

# Handle separate Cluster File
- name: Seek Cluster Definition files in Definition Path
  register: __clus_file_stat
  ansible.builtin.stat:
    path: "{{ init__cluster_file }}"

- name: Include vars to top level for other facts in Definition File
  ansible.builtin.include_vars:
    file: "{{ init__user_definition_file }}"

# Must be included before cluster definition checks as it may have logic control switches
- name: Override with separate Cluster file if provided
  when: __clus_file_stat.stat.exists
  ansible.builtin.set_fact:
    init__cluster_definition_file: "{{ __clus_file_stat.stat.path }}"

# Note that this depends on the earlier set_fact for globals to take precedence over include_vars
- name: Include Cluster definition file for current localhost use after User Definition is Loaded
  ansible.builtin.include_vars:
    file: "{{ init__cluster_definition_file }}"

# Admin Password
- name: Prompt User for a password if not provided in config or vault
  when: admin_password is undefined or admin_password | length < 2
  block:
    - name: Prompt User for Password if not supplied
      no_log: true
      ansible.builtin.pause:
        prompt: "No admin password found in profile.yml or extra_vars, or provided password too short; please provide a Password"
      register: __user_input_password

    - name: Set Admin password
      no_log: true
      ansible.builtin.set_fact:
        admin_password: "{{ __user_input_password.user_input }}"

# Parcel Distro
- name: Determine preferred Parcel Distribution
  ansible.builtin.set_fact:
    init__parcel_distro: "{{ parcel_distro | default(default_parcel_distro) }}"

# Merge User Profile to Globals
- name: Marshal User Config into Globals
  ansible.builtin.set_fact:
    globals: "{{ globals | default({}) | combine(user_config , recursive=True) }}"
  vars:
    user_config:
      name_prefix: "{{ name_prefix | default(default_name_prefix) }}"
      tags: "{{ tags | default(omit) }}"
      region: "{{ infra_region | default(default_infra_region) }}"
      infra_deployment_engine: "{{ infra_deployment_engine | default(default_infra_deployment_engine) }}"
      infra_type: "{{ infra_type | default(default_infra_type) }}"
      terraform:
        base_dir: "{{ terraform.base_dir | default(default_terraform_base_dir) | expanduser }}"
        state_storage: "{{ terraform.state_storage | default(omit) }}"
        auto_remote_state: "{{ terraform.auto_remote_state | default(False) }}"
        remote_state_bucket: "{{ terraform.remote_state_bucket | default(omit) }}"
        remote_state_lock_table: "{{ terraform.remote_state_lock_table | default(omit) }}"
      ssh:
        public_key_id: "{{ public_key_id | default(omit) }}"
        public_key_file: "{{ public_key_file | default(omit) }}"
        public_key_text: "{{ public_key_text | default(omit) }}"
        private_key_file: "{{ private_key_file | default(omit) }}"
        key_path: "{{ ssh_key_path | default(default_sshkey_path) }}"
      cloudera_license_file: "{{ license_file | default(omit) }}"
      gcloud_credential_file: "{{ gcloud_credential_file | default(omit) }}"
      cdp_profile: "{{ cdp_profile | default(omit) }}"
      cdp_region: "{{ cdp_region | default(omit) }}"
      aws_profile: "{{ aws_profile | default(omit) }}"
      force_teardown: "{{ purge | default(omit) }}"
      env_vars: "{{ env_vars | default(omit) }}"

- name: Set GCloud Environment Variables if needed
  when: globals.gcloud_credential_file is defined
  ansible.builtin.set_fact:
    globals: "{{ globals | default({}) | combine( env_gcp_entries, recursive=True ) }}"
  vars:
    env_gcp_entries:
      env_vars:
        GCP_AUTH_KIND: serviceaccount
        GCP_SERVICE_ACCOUNT_FILE: "{{ globals.gcloud_credential_file }}"

- name: Add no_log variables to globals
  no_log: true
  ansible.builtin.set_fact:
    globals: "{{ globals | default({}) | combine(__no_log_globals, recursive=True) }}"
  vars:
    __no_log_globals:
      admin_password: "{{ admin_password | mandatory }}"

- name: Set CM facts
  ansible.builtin.set_fact:
    cloudera_manager_license_file: "{{ globals.cloudera_license_file | default(omit) }}"
    cloudera_manager_admin_password: "{{ globals.admin_password }}"
  no_log: true

# Ansible tempfile doesn't appear to work well on ansible-runner
- name: Set local Temp directory if not supplied
  ansible.builtin.set_fact:
    local_temp_dir: "{{ local_temp_dir | default(default_local_temp_dir) }}"

- name: Set Profile Env Vars if required
  ansible.builtin.set_fact:
    globals: "{{ globals | default({}) | combine( env_var_entries, recursive=True ) }}"
  vars:
    env_var_entries:
      env_vars:
        CDP_PROFILE: "{{ globals.cdp_profile | default(omit) }}"
        AWS_PROFILE: "{{ globals.aws_profile | default(omit) }}"
        AWS_REGION: "{{ globals.region | default(omit) }}"

# # This task is last to allow hard-coded 'globals' in the definition.yml to take top priority as a break-glass measure
# - name: Merge overwrite globals from Definition file with Globals on User File
#   when: __def_vars.globals is defined
#   ansible.builtin.set_fact:
#     globals: "{{ globals | combine(__def_vars.globals, recursive=True) }}"