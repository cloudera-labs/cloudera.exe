# Copyright 2024 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: Check if signed cert is available
  become: no
  delegate_to: localhost
  stat:
    path: "{{ local_tls_signed_certs_dir }}/{{ inventory_hostname }}.pem"
  register: signed_cert

- name: Fail is the signed certificate is not available for this host
  ansible.builtin.fail:
    msg: >
      "Signed cert for {{ inventory_hostname }} could not be found. If manual signing is
      required, do this now and re-run the playbook with 'tls_signed_certs_dir' variable set.
  when:
    - not signed_cert.stat.exists

- name: Copy signed certs to hosts
  ansible.builtin.copy:
    src: "{{ local_tls_signed_certs_dir }}/{{ inventory_hostname }}.pem"
    dest: "{{ tls_cert_path }}"
    mode: 0644

- name: Create host agnostic link for signed certificate
  ansible.builtin.file:
    src: "{{ tls_cert_path }}"
    dest: "{{ tls_cert_path_generic }}"
    state: hard
    force: true
    mode: 0644
    owner: root
    group: root

- name: Validate certificate
  ansible.builtin.command:
    cmd: "{{ openssl_path }} verify -verbose -CAfile {{ tls_ca_chain_path }} {{ tls_cert_path }}"

# Update the keystore with the renewed cert
# Reference: https://support.smartbear.com/collaborator/faq/how-to-update-an-expired-certificate-in-the-existi/
# ....Step 1: Create chain including signed host cert
# ....Step 2: Create PKCS12 keystore with chain and key. Alias name is {{ inventory_hostname }}
# NOTE: Step 1 & 2 are handled by the tasks below
- name: Create temporary keystore file name
  ansible.builtin.tempfile:
    state: file
    suffix: tmp_keystore.p12
  register: __pvc_tls_temp_keystore

- name: Generate a temporary PKCS12 keystore with renewed cert
  community.crypto.openssl_pkcs12:
    action: export
    path: "{{ __pvc_tls_temp_keystore.path }}"
    passphrase: "{{ tls_keystore_password }}"
    friendly_name: "{{ keystore_alias | default(inventory_hostname) }}"
    privatekey_path: "{{ tls_key_path_plaintext_generic }}"
    certificate_path: "{{ tls_cert_path_generic }}"
    other_certificates:
      - "{{ base_dir_security_pki }}/cluster_intca.pem"
      - "{{ base_dir_security_pki }}/cluster_rootca.pem"

# ....Step 3: Update the {{ tls_keystore_path }} with the above keystore
- name: Import the temporary keystore to {{ tls_keystore_path }}
  community.general.java_cert:
    pkcs12_path: "{{ __pvc_tls_temp_keystore.path }}"
    pkcs12_alias: "{{ keystore_alias | default(inventory_hostname) }}"
    pkcs12_password: "{{ tls_keystore_password }}"
    cert_alias: "{{ keystore_alias | default(inventory_hostname) }}"
    keystore_path: "{{ tls_keystore_path }}"
    keystore_pass: "{{ tls_keystore_password }}"
    keystore_create: false
    state: present

- name: Remove the temporary keystore
  ansible.builtin.file:
    path: "{{ __pvc_tls_temp_keystore.path }}"
    state: absent
