---

# Copyright 2021 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Execute CDP OpDB teardown
  when:
    - run__include_opdb or run__force_teardown | bool
    - run__opdb_configs is defined
    - run__opdb_configs | length > 0
  cloudera.cloud.opdb:
    env: "{{ run__env_name }}"
    name: "{{ __opdb_config.name }}"
    state: absent
    wait: yes
  loop_control:
    loop_var: __opdb_config
    label: "{{ __opdb_config.name | default('opdb') }}"
  loop: "{{ run__opdb_configs }}"
  async: 3600 # 1 hour timeout
  poll: 0
  register: __opdb_teardowns_info

- name: Execute CDP DW teardown
  when:
    - run__include_dw | bool
    - run__env_info.environments | length > 0
    - run__env_info.environments[0].descendants.dw | length > 0
  block:
    - name: Execute CDP DW virtual warehouse teardown
      when: run__force_teardown | bool
      cloudera.cloud.dw_cluster:
        env: "{{ run__env_name }}"
        state: absent
        wait: no
        force: "{{ run__dw_force_delete }}"
      register: __dw_cluster_teardown_info

    - name: Execute CDP DW virtual warehouse teardown
      when: not run__force_teardown | bool
      block:
        - name: Retrieve CDP DW experiences
          cloudera.cloud.dw_cluster_info:
            env: "{{ run__env_name }}"
          register: __dw_list

        - name: Debug output CDP DW
          debug:
            msg: "CDP DW : {{ __dw_list }}"

        - name: Fetch all the CDP DW Database Catalogs under the cluster
          cloudera.cloud.dw_database_catalog_info:
            cluster_id: "{{ __dw_list.clusters[0].id }}"
          register: __dbc_list

        - name: Debug output CDP DW DBCs
          debug:
            msg: "CDP DW DBC : {{ __dbc_list }}"

        - name: Fetch all the CDP DW Virtual Warehouse
          cloudera.cloud.dw_virtual_warehouse_info:
            cluster_id: "{{ __dw_list.clusters[0].id }}"
            dbc_id: "{{ __dbc.id }}"
          loop: "{{ __dbc_list.database_catalogs }}"
          loop_control:
            loop_var: __dbc
          register: __vw_list

        - name: Debug output CDP DW VWs
          debug:
            msg: "CDP DW VWs : {{ __vw_list }}"
#
#        - name: Delete all CDP DW Virtual Warehouses
#          cloudera.cloud.dw_virtual_warehouse:
#            cluster_id: "{{ __dw_list.clusters[0].id }}"
#            id: "{{ __vw.id }}"
#            state: absent
#            wait: no
#          loop: "{{ __vw_list.results[0].virtual_warehouses }}"
#          loop_control:
#            loop_var: __vw
#          async: 3600 # 1 hour timeout
#          poll: 0
#          register: __dw_vw_teardown_info

#        - name: Delete all CDP DW Database Catalogs
#          cloudera.cloud.dw_database_catalog:
#            cluster_id: "{{ __dw_list.clusters[0].id }}"
#            name: "{{ __dbc.name }}"
#            state: absent
#            wait: no
#          loop: "{{ __dbc_list.database_catalogs }}"
#          loop_control:
#            loop_var: __dbc
#          async: 3600 # 1 hour timeout
#          poll: 0
#          register: __dw_dbc_teardown_info

        - name: Execute CDP DW virtual warehouse teardown
          cloudera.cloud.dw_cluster:
            env: "{{ run__env_name }}"
            state: absent

            wait: no
          async: 3600 # 1 hour timeout
          poll: 0
          register: __dw_cluster_teardown_info

- name: Execute CDP Dataflow teardown
  register: __df_teardown_info
  when:
    - run__include_df or run__force_teardown | bool
    - run__df_env_info is defined and run__df_env_info.services is defined
    - run__df_env_info.services | length > 0
  cloudera.cloud.df:
    name: "{{ __df_teardown_req_item.crn }}"
    persist: "{{ run__df_persist }}"
    force: "{{ run__df_force_delete }}"
    state: absent
    wait: no
  loop_control:
    loop_var: __df_teardown_req_item
  loop: "{{ run__df_env_info.services }}"

- name: Execute CDP ML Workspace teardown
  when:
    - run__include_ml or run__force_teardown | bool
    - run__ml_configs is defined
    - run__ml_configs | length > 0
  cloudera.cloud.ml:
    name: "{{ __ml_config_item.name }}"
    env: "{{ run__env_name }}"
    state: absent
    remove_storage: "{{ run__ml_remove_storage }}"
    force_delete: "{{ run__ml_force_delete }}"
  loop_control:
    loop_var: __ml_config_item
    label: "{{ __ml_config_item.name | default('ml') }}"
  loop: "{{ run__ml_configs }}"
  async: 3600 # 1 hour timeout
  poll: 0
  register: __ml_teardowns_info

- name: Execute CDP Datahub teardown
  when:
    - run__include_datahub or run__force_teardown | bool
    - run__datahub_configs is defined
    - run__datahub_configs | length > 0
  cloudera.cloud.datahub_cluster:
    name: "{{ __datahub_config_item.name }}"
    state: absent
    force: "{{ run__datahub_force_teardown }}"
    wait: yes
  loop_control:
    loop_var: __datahub_config_item
    label: "{{ __datahub_config_item.name | default('datahub') }}"
  loop: "{{ run__datahub_configs }}"
  async: 3600 # 1 hour timeout
  poll: 0
  register: __datahub_teardowns_info

- name: Wait for CDP ML Workspace deployments to decommission
  when:
    - __ml_teardowns_info is defined
    - __ml_teardowns_info.results is defined
    - __ml_teardowns_info.results | length > 0
  ansible.builtin.async_status:
    jid: "{{ __ml_teardown.ansible_job_id }}"
  loop_control:
    loop_var: __ml_teardown
    label: "{{ __ml_teardown.__ml_config_item.name | default('ml') }}"
  loop: "{{ __ml_teardowns_info.results }}"
  register: __ml_teardowns_async
  until: __ml_teardowns_async.finished
  retries: 120
  delay: 30

- name: Wait for CDP Datahub deployments to decommission
  when:
    - __datahub_teardowns_info is defined
    - __datahub_teardowns_info.results is defined
    - __datahub_teardowns_info.results | length > 0
  ansible.builtin.async_status:
    jid: "{{ __datahub_teardown_item.ansible_job_id }}"
  loop_control:
    loop_var: __datahub_teardown_item
    label: "{{ __datahub_teardown_item.__datahub_config_item.name | default('datahub') }}"
  loop: "{{ __datahub_teardowns_info.results }}"
  register: __datahub_teardowns_async
  until: __datahub_teardowns_async.finished
  retries: 120
  delay: 30

- name: Wait for CDP DW deployments to decommission
  when: run__include_dw | bool
  block:
#    - name: CDW cluster teardown info
#      debug:
#        msg: "CDW : {{ __dw_vw_teardown_info }}"
#
#    - name: Wait for CDW Virtual Warehouse to decommision
#      when:
#      - __dw_vw_teardown_info is defined
#      - __dw_vw_teardown_info.results is defined
#      - __dw_vw_teardown_info.results | length > 0
#      ansible.builtin.async_status:
#        jid: "{{ __dw_vw_teardown.ansible_job_id }}"
#      loop_control:
#        loop_var: __dw_vw_teardown
#      loop: "{{ __dw_vw_teardown_info.results }}"
#      register: __dw_vw_teardown_async
#      until: __dw_vw_teardown_async.finished
#      retries: 120
#      delay: 30
#
#    - name: Wait for CDW Database Catalog to decommision
#      when:
#        - __dw_dbc_teardown_info is defined
#        - __dw_dbc_teardown_info.results is defined
#        - __dw_dbc_teardown_info.results | length > 0
#      ansible.builtin.async_status:
#        jid: "{{ __dw_dbc_teardown.ansible_job_id }}"
#      loop_control:
#        loop_var: __dw_dbc_teardown
#      loop: "{{ __dw_dbc_teardown_info.results }}"
#      register: __dw_dbc_teardown_async
#      until: __dw_dbc_teardown_async.finished
#      retries: 120
#      delay: 30

    - name: CDW cluster teardown info
      debug:
        msg: "CDW : {{ __dw_cluster_teardown_info }}"

    - name: Wait for CDW cluster to decommision
      when:
        - __dw_cluster_teardown_info is defined
        - __dw_cluster_teardown_info.results is defined
        - __dw_cluster_teardown_info.results | length > 0
      ansible.builtin.async_status:
        jid: "{{ __dw_cluster_teardown.ansible_job_id }}"
      loop_control:
        loop_var: __dw_cluster_teardown
      loop: "{{ __dw_cluster_teardown_info }}"
      register: __dw_cluster_teardown_async
      until: __dw_cluster_teardown_async.finished
      retries: 120
      delay: 30

- name: Wait for CDP OpDB deployments to decommission
  when:
    - __opdb_teardowns_info is defined
    - __opdb_teardowns_info.results is defined
    - __opdb_teardowns_info.results | length > 0
  ansible.builtin.async_status:
    jid: "{{ __opdb_teardown.ansible_job_id }}"
  loop_control:
    loop_var: __opdb_teardown
    label: "{{ __opdb_teardown.__opdb_config.name | default('opdb') }}"
  loop: "{{ __opdb_teardowns_info.results }}"
  register: __opdb_teardowns_async
  until: __opdb_teardowns_async.finished
  retries: 120
  delay: 30

- name: Wait for CDP Dataflow deployment to decommission
  when:
    - run__include_df
    - run__df_env_info.services | length > 0
  cloudera.cloud.df:
    name: "{{ __df_teardown_wait_item.crn }}"
    persist: "{{ run__df_persist }}"
    force: "{{ run__df_force_delete }}"
    state: absent
    wait: yes
  loop_control:
    loop_var: __df_teardown_wait_item
  loop: "{{ run__df_env_info.services }}"