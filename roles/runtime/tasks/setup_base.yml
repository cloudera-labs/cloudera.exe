---

# Copyright 2023 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Request Service Deployments
- name: Request CDP Datahub deployments
  when: run__include_datahub
  tags: dh
  cloudera.cloud.datahub_cluster:
    name: "{{ __datahub_config_item.name }}"
    env: "{{ run__env_name }}"
    state: present
    image: "{{ run__datahub_image_catalog_entry.uuid }}"
    catalog: "{{ run__datahub_image_catalog_name }}"
    template: "{{ ('template' in __datahub_config_item) | ternary(run__datahub_available_templates | select('ansible.builtin.search', __datahub_config_item.template | default(omit)) | list | first, omit, omit) }}"
    definition: "{{ ('definition' in __datahub_config_item) |  ternary(run__datahub_available_definitions | select('ansible.builtin.search', __datahub_config_item.definition | default(omit)) | list | first, omit, omit) }}"
    groups: "{{ __datahub_config_item.instance_groups | default(omit) }}"
    extension: "{{ __datahub_config_item.extension | default(omit) }}"
    subnets_filter: "{{ __datahub_config_item.subnets_filter | default(omit) }}"
    multi_az: "{{ __datahub_config_item.multi_az | default(omit) }}"
    tags: "{{ __datahub_config_item.tags }}"
    wait: yes
  loop_control:
    loop_var: __datahub_config_item
    label: "{{ __datahub_config_item.name | default ('None') }}"
  loop: "{{ run__datahub_configs }}"
  async: 3600 # 1 hour timeout
  poll: 0
  register: __datahub_builds

- name: Execute CDP ML Workspace experiences setup
  when: run__include_ml
  tags: ml
  cloudera.cloud.ml:
    name: "{{ __ml_config_item.name }}"
    env: "{{ run__env_name }}"
    k8s_request: "{{ __ml_config_item.k8s_request if __ml_config_item.k8s_request.instanceGroups | length > 0 else omit }}"
    tls: "{{ __ml_config_item.raw.tls | default(omit) }}"
    monitoring: "{{ __ml_config_item.raw.monitoring | default(omit) }}"
    governance: "{{ __ml_config_item.raw.governance | default(omit) }}"
    metrics: "{{ __ml_config_item.raw.metrics | default(omit) }}"
    database: "{{ __ml_config_item.raw.database | default(omit) }}"
    nfs: "{{ __ml_config_item.nfs | default(omit) }}"
    nfs_version: "{{ __ml_config_item.nfs_version | default(omit) }}"
    ip_addresses: "{{ __ml_config_item.raw.ip_addresses | default(omit) }}"
    public_loadbalancer: "{{ __ml_config_item.raw.public_loadbalancer | default(omit) }}"
    storage: "{{ __ml_config_item.raw.storage | default(omit) }}"
  loop_control:
    loop_var: __ml_config_item
    label: "{{ __ml_config_item.name | default ('None') }}"
  loop: "{{ run__ml_configs }}"
  async: 3600 # 1 hour timeout
  poll: 0
  register: __ml_builds

- name: Execute CDP DE Service experiences setup
  when: run__include_de
  tags: de
  cloudera.cloud.de:
    name: "{{ __de_config_item.name }}"
    env: "{{ run__env_name }}"
    instance_type: "{{ __de_config_item.raw.instance_type | default(run__de_compute_default[run__infra_type]) }}"
    minimum_instances: "{{ __de_config_item.raw.minimum_instances | default(omit) }}"
    maximum_instances: "{{ __de_config_item.raw.maximum_instances | default(omit) }}"
    minimum_spot_instances: "{{ __de_config_item.raw.minimum_spot_instances | default(omit) }}"
    maximum_spot_instances: "{{ __de_config_item.raw.maximum_spot_instances | default(omit) }}"
    chart_value_overrides: "{{ __de_config_item.raw.chart_value_overrides | default(omit) }}"
    enable_public_endpoint: "{{ __de_config_item.raw.enable_public_endpoint | default(omit) }}"
    enable_workload_analytics: "{{ __de_config_item.raw.enable_workload_analytics | default(omit) }}"
    initial_instances: "{{ __de_config_item.raw.initial_instances | default(omit) }}"
    initial_spot_instances: "{{ __de_config_item.raw.initial_spot_instances | default(omit) }}"
    root_volume_size: "{{ __de_config_item.raw.root_volume_size | default(omit) }}"
    skip_validation: "{{ __de_config_item.raw.skip_validation | default(omit) }}"
    tags: "{{ __de_config_item.raw.tags | default(omit) }}"
    use_ssd: "{{ __de_config_item.raw.use_ssd | default(omit) }}"
    loadbalancer_ips: "{{ __de_config_item.raw.loadbalancer_ips | default(omit) }}"
    whitelist_ips: "{{ __de_config_item.raw.whitelist_ips | default(omit) }}"
  loop_control:
    loop_var: __de_config_item
    label: "{{ __de_config_item.name | default ('None') }}"
  loop: "{{ run__de_configs }}"
  async: 7200 # 2 hour timeout
  poll: 0
  register: __de_builds

- name: Execute CDP OpDB setup
  when: run__include_opdb
  tags: opdb
  cloudera.cloud.opdb:
    name: "{{ __opdb_config_item.name }}"
    env: "{{ run__env_name }}"
    state: present
    wait: yes
  loop_control:
    loop_var: __opdb_config_item
    label: "{{ __opdb_config_item.name | default ('None') }}"
  loop: "{{ run__opdb_configs }}"
  async: 3600 # 1 hour timeout
  poll: 0
  register: __opdb_builds

- name: Execute CDP Dataflow setup
  when: run__include_df
  tags: df
  cloudera.cloud.df_service:
    name: "{{ run__cdp_env_crn }}"
    nodes_min: "{{ run__df_nodes_min }}"
    nodes_max: "{{ run__df_nodes_max }}"
    public_loadbalancer: "{{ run__df_public_loadbalancer }}"
    loadbalancer_ip_ranges: "{{ run__df_lb_ip_ranges }}"
    k8s_ip_ranges: "{{ run__df_k8s_ip_ranges }}"
    cluster_subnets: "{{ run__df_cluster_subnets }}"
    cluster_subnets_filter: "{{ run__df_cluster_subnets_filter }}"
    loadbalancer_subnets: "{{ run__df_lb_subnets }}"
    loadbalancer_subnets_filter: "{{ run__df_lb_subnets_filter }}"
    tags: "{{ run__df_tags }}"
    state: present
    wait: no

# Wait for Service Deployments
- name: Wait for CDP Datahub deployments to complete
  when: run__include_datahub
  tags: dh
  ansible.builtin.async_status:
    jid: "{{ __datahub_build_item.ansible_job_id }}"
  loop_control:
    loop_var: __datahub_build_item
    label: "{{ __datahub_build_item.__datahub_config_item.name | default ('None') }}"
  loop: "{{ __datahub_builds.results }}"
  register: __datahub_builds_async
  until: __datahub_builds_async.finished
  retries: 120
  delay: 30

- name: Wait for CDP ML Workspace experiences to complete
  when: run__include_ml
  tags: ml
  ansible.builtin.async_status:
    jid: "{{ __ml_build.ansible_job_id }}"
  loop_control:
    loop_var: __ml_build
    label: "{{ __ml_build.__ml_config_item.name | default ('None') }}"
  loop: "{{ __ml_builds.results }}"
  register: __ml_builds_async
  until: __ml_builds_async.finished
  retries: 120
  delay: 30

- name: Wait for CDP DE Service experiences to complete
  when: run__include_de
  tags: de
  ansible.builtin.async_status:
    jid: "{{ __de_build.ansible_job_id }}"
  loop_control:
    loop_var: __de_build
    label: "{{ __de_build.__de_config_item.name | default ('None') }}"
  loop: "{{ __de_builds.results }}"
  register: __de_builds_async
  until: __de_builds_async.finished
  retries: 120
  delay: 60

- name: Wait for CDP OpDB deployments to complete
  when: run__include_opdb
  tags: opdb
  ansible.builtin.async_status:
    jid: "{{ __opdb_build.ansible_job_id }}"
  loop_control:
    loop_var: __opdb_build
    label: "{{ __opdb_build.__opdb_config_item.name | default ('None') }}"
  loop: "{{ __opdb_builds.results }}"
  register: __opdb_builds_async
  until: __opdb_builds_async.finished
  retries: 120
  delay: 30

- name: Wait for CDP Dataflow Service Enablement to complete
  when: run__include_df
  tags: df
  cloudera.cloud.df_service:
    name: "{{ run__cdp_env_crn }}"
    wait: yes

# Request Service child deployments
- name: Create CDP DE Virtual clusters
  when: run__include_de
  tags: de
  cloudera.cloud.de_virtual_cluster:
    cluster_name: "{{ __de_vc_config_item.0.name }}"
    env: "{{ run__env_name }}"
    name: "{{ __de_vc_config_item.1.name | default([run__namespace, run__de_vc_suffix ,__de_vc_index] | join('-')) }}"
    cpu_requests: "{{ __de_vc_config_item.1.cpu_requests | default(omit) }}"
    memory_requests: "{{ __de_vc_config_item.1.memory_requests | default(omit) }}"
    chart_value_overrides: "{{ __de_vc_config_item.1.chart_value_overrides | default(omit) }}"
    runtime_spot_component: "{{ __de_vc_config_item.1.runtime_spot_component | default(omit) }}"
    spark_version: "{{ __de_vc_config_item.1.spark_version | default(omit) }}"
    acl_users: "{{ __de_vc_config_item.1.acl_users | default(omit) }}"
    wait: yes
  async: 1800 # 30 minute timeout
  poll: 0
  register: __de_vc_builds
  with_subelements:
    - "{{ run__de_configs | selectattr('raw.virtual_clusters', 'defined') | list }}"
    - raw.virtual_clusters
  loop_control:
    loop_var: __de_vc_config_item
    index_var: __de_vc_index
    label: "{{ __de_vc_config_item.0.name | default ('None') }}"

- name: Ensure requested CDP DF ReadyFlows are imported
  when: run__include_df
  tags: df
  cloudera.cloud.df_readyflow:
    name: "{{ __df_readyflow_item.flow_name }}"
  loop: "{{ run__df_readyflows }}"
  loop_control:
    loop_var: __df_readyflow_item
    label: "{{ __df_readyflow_item.flow_name }}"

- name: Ensure requested CDP DF CustomFlows are imported
  when: run__include_df
  tags: df
  cloudera.cloud.df_customflow:
    name: "{{ __df_customflow_item.flow_name }}"
    file: "{{ __df_customflow_item.file }}"
    description: "{{ __df_customflow_item.description | default('') }}"
    comments: "{{ __df_customflow_item.comments | default('') }}"
  loop: "{{ run__df_customflows }}"
  loop_control:
    loop_var: __df_customflow_item
    label: "{{ __df_customflow_item.flow_name }}"

- name: Create CDP DF Deployments
  when:
    - run__include_df
    - run__df_configs is defined
  tags: df
  cloudera.cloud.df_deployment:
    name: "{{ __df_deploy_item.name }}"
    df_name: "{{ run__env_name }}"
    flow_ver_crn: "{{ __df_deploy_item.raw.flow_ver_crn | default(omit) }}"
    flow_name: "{{ __df_deploy_item.raw.flow_name | default(omit) }}"
    flow_ver: "{{ __df_deploy_item.raw.flow_ver | default(omit) }}"
    size: "{{ __df_deploy_item.raw.size | default(omit) }}"
    static_node_count: "{{ __df_deploy_item.raw.static_node_count | default(omit) }}"
    autoscale: "{{ __df_deploy_item.raw.autoscale | default(omit) }}"
    autoscale_nodes_min: "{{ __df_deploy_item.raw.autoscale_nodes_min | default(omit) }}"
    autoscale_nodes_max: "{{ __df_deploy_item.raw.autoscale_nodes_max | default(omit) }}"
    nifi_ver: "{{ __df_deploy_item.raw.nifi_ver | default(omit) }}"
    autostart_flow: "{{ __df_deploy_item.raw.autostart_flow | default(omit) }}"
    parameter_groups: "{{ __df_deploy_item.raw.parameter_groups | default(omit) }}"
    kpis: "{{ __df_deploy_item.raw.kpis | default(omit) }}"
  async: 720
  poll: 0
  register: __df_deployments
  loop: "{{ run__df_configs }}"
  loop_control:
    loop_var: __df_deploy_item
    label: "{{ __df_deploy_item.name }}"

# Wait for Service child deployments
- name: Wait for CDP DE Virtual cluster setup to complete
  when: run__include_de
  tags: de
  ansible.builtin.async_status:
    jid: "{{ __de_vc_build.ansible_job_id }}"
  register: __de_vc_builds_async
  until: __de_vc_builds_async.finished
  retries: 30
  delay: 30
  loop: "{{ __de_vc_builds.results }}"
  loop_control:
    loop_var: __de_vc_build
    label: "{{ __de_vc_build.__de_vc_config_item.0.name | default ('None') }}"

- name: Wait for CDP DF Deployments to complete
  when:
    - run__include_df
    - run__df_configs is defined
  tags: df
  ansible.builtin.async_status:
    jid: "{{ __df_deployment.ansible_job_id }}"
  register: __df_deployments_async
  until: __df_deployments_async.finished
  retries: 60
  delay: 15
  loop: "{{ __df_deployments.results }}"
  loop_control:
    loop_var: __df_deployment
    label: "{{ __df_deployment.__df_deploy_item.0.name | default ('None') }}"
