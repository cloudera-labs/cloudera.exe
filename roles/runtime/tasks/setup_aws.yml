---

# Copyright 2021 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Set up AWS EC2 metadata for CDP Datahubs
  when: run__include_datahub
  block:
    - name: Retrieve AWS EC2 instance details
      community.aws.ec2_instance_info:
        region: "{{ run__region }}"
        filters:
          "tag:Name": "{{ run__namespace }}*"
      register: __aws_instance_info

    - name: Add tags to AWS EC2 instances
      amazon.aws.ec2_tag:
        region: "{{ run__region }}"
        tags: "{{ run__datahub_tags }}"
        resource: "{{ __aws_instance_item.instance_id }}"
      loop_control:
        loop_var: __aws_instance_item
        label: "{{ __aws_instance_item.instance_id }}"
      loop: "{{ __aws_instance_info.instances }}"

- name: Setup CDP DW cluster on AWS
  when: run__include_dw
  block:
#    - name: Execute CDP DW cluster setup
#      cloudera.cloud.dw_cluster:
#        env: "{{ run__env_name }}"
#        overlay: "{{ run__dw_overlay_network }}"
#        aws_public_subnets: "{{ run__datahub_public_subnet_ids }}"
#        aws_private_subnets: "{{ run__datahub_private_subnet_ids }}"
#        state: present
#        wait: yes
#      async: 3600 # 1 hour timeout
#      poll: 0
#      register: __dw_builds
#
#    - name: Wait for CDP DW cluster setup to complete
#      ansible.builtin.async_status:
#        jid: "{{ __dw_builds.ansible_job_id }}"
#      #loop_control:
#      #  loop_var: __opdb_build
#      #  label: "{{ __opdb_build.__opdb_config.name }}"
#      #loop: "{{ __opdb_builds.results }}"
#      register: __dw_builds_async
#      until: __dw_builds_async.finished
#      retries: 120
#      delay: 30

    - name: Retrieve CDP DW experiences
      cloudera.cloud.dw_cluster_info:
        env: "{{ run__env_name }}"
      register: run__dw_list

    - name: Create CDP DW Database catalogs
      when: not __dw_dbc_config.use_default_dbc
      cloudera.cloud.dw_dbc:
        cluster_id : "{{ run__dw_list.clusters[0].id }}"
        name: "{{ __dw_dbc_config.name }}"
        load_demo_data: "{{ __dw_dbc_config.load_demo_data }}"
        state: present
        wait: yes
      async: 3600 # 1 hour timeout
      poll: 0
      loop: "{{ run__dw_dbc_configs }}"
      loop_control:
        loop_var: __dw_dbc_config
      register: __dw_dbc_builds

    - name: Wait for CDP DW Database catalogs setup to complete
      when: __dw_dbc_build.ansible_job_id is defined
      ansible.builtin.async_status:
        jid: "{{ __dw_dbc_build.ansible_job_id }}"
      register: __dw_dbc_builds_async
      until: __dw_dbc_builds_async.finished
      retries: 120
      delay: 30
      loop: "{{ __dw_dbc_builds.results }}"
      loop_control:
        loop_var: __dw_dbc_build

    - name: Set CDP DW Database catalog name to id map
      when: __dw_dbc_build_async.dbcs is defined
      ansible.builtin.set_fact:
        run__dw_dbc_ids: "{{ run__dw_dbc_ids | default({}) | combine({ __dw_dbc_build_async.dbcs[0].name : __dw_dbc_build_async.dbcs[0].id}) }}"
      loop: "{{ __dw_dbc_builds_async.results }}"
      loop_control:
        loop_var: __dw_dbc_build_async

    - name: Create CDP DW Virtual warehouse
      cloudera.cloud.dw_vw:
        cluster_id: "{{ run__dw_list.clusters[0].id }}"
        dbc_id: "{{ run__dw_dbc_ids[__dw_vw_config.dbc_name] if not __dw_vw_config.use_default_dbc else run__dw_list.clusters[0].dbcs[0].id}}"
        vw_type: "{{ __dw_vw_config.vw_type }}"
        name: "{{ __dw_vw_config.name }}"
        template: "{{ __dw_vw_config.template }}"
        autoscaling_min_cluster: "{{ __dw_vw_config.autoscaling_min_cluster | int }}"
        autoscaling_max_cluster: "{{ __dw_vw_config.autoscaling_max_cluster | int }}"
        common_configs: "{{ __dw_vw_config.common_configs }}"
        application_configs: "{{ __dw_vw_config.application_configs }}"
        ldap_groups: "{{ __dw_vw_config.ldap_groups }}"
        enable_sso: "{{ __dw_vw_config.enable_sso | bool }}"
        tags: "{{ __dw_vw_config.tags }}"
        wait: yes
      async: 3600 # 1 hour timeout
      poll: 0
      register: __dw_vw_builds
      loop: "{{ run__dw_vw_configs }}"
      loop_control:
        loop_var: __dw_vw_config

    - name: Wait for CDP DW Virtual warehouse setup to complete
      when: __dw_vw_build.ansible_job_id is defined
      ansible.builtin.async_status:
        jid: "{{ __dw_vw_build.ansible_job_id }}"
      register: __dw_vw_builds_async
      until: __dw_vw_builds_async.finished
      retries: 120
      delay: 30
      loop: "{{ __dw_vw_builds.results }}"
      loop_control:
        loop_var: __dw_vw_build

    - name: Print Virtual Warehouses
      ansible.builtin.debug:
        msg: "Database Cluster : {{ __dw_vw_builds_async }}"